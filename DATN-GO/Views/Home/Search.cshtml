@model DATN_GO.ViewModels.SearchhViewModel
@{
    ViewData["Title"] = "Kết quả tìm kiếm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container my-4" style="min-height:60vh;">
    <h3 class="fw-bold">Kết quả cho: "@Model.Query"</h3>

    @if (!Model.Products.Any() && !Model.Stores.Any())
    {
        <div class="d-flex flex-column align-items-center justify-content-center text-center py-5">
            <i class="bi bi-search fs-1 text-danger mb-3"></i>
            <p class="text-muted">Không tìm thấy kết quả nào cho từ khóa <b>@Model.Query</b>.</p>
            <a href="/" class="btn btn-outline-danger mt-3 rounded-pill">Quay lại trang chủ</a>
        </div>

    }
    else
    {
        @* --- Products --- *@
        @if (Model.Products.Any())
        {
            <h4 class="mt-4 mb-3 text-crimson">Sản phẩm</h4>
            <div class="row g-4">
                @foreach (var p in Model.Products)
                {
                    var info = p.PriceInfo;
                    decimal? min = info?.MinPrice ?? info?.Price;
                    decimal? max = info?.MaxPrice ?? info?.Price;
                    bool hasVariant = info?.IsVariant == true || (min.HasValue && max.HasValue && min.Value != max.Value);

                    // ✅ chỉ lấy giá thấp nhất
                    string displayPrice = (min.HasValue && min > 0)
                    ? $"{min.Value:N0}đ"
                    : "Chưa có giá";

                    <div class="col-lg-3 col-md-4 col-sm-6">
                        <div class="product-card card h-100 border-0 shadow-sm hover-scale">
                            <a asp-controller="Products" asp-action="DetailProducts" asp-route-id="@p.Id">
                                <img src="@p.MainImage" class="card-img-top"
                                     style="height:200px;object-fit:cover;" alt="@p.Name" />
                            </a>
                            <div class="card-body d-flex flex-column">
                                <h6 class="fw-bold text-truncate">@p.Name</h6>
                                <p class="text-danger fw-bold mb-1">@displayPrice</p>
                                <p class="text-muted small mb-2 text-truncate">@p.StoreName</p>

                                <div class="rating text-warning mb-3">
                                    @if (p.Rating <= 0)
                                    {
                                        <span class="text-muted small fst-italic">Chưa có đánh giá</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star-fill"></i> @p.Rating.ToString("0.0")
                                    }
                                </div>

                                <!-- Nút hành động -->
                                <div class="mt-auto d-flex gap-2">
                                    <button class="btn btn-crimson btn-sm rounded-pill add-to-cart-btn w-50"
                                            type="button"
                                            data-product-id="@p.Id"
                                            data-has-variant="@(hasVariant.ToString().ToLower())">
                                        <i class="bi bi-cart-plus"></i> Thêm
                                    </button>

                                    <button class="btn btn-outline-danger btn-sm rounded-pill buy-now-btn w-50"
                                            type="button"
                                            data-product-id="@p.Id"
                                            data-has-variant="@(hasVariant.ToString().ToLower())">
                                        Mua ngay
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @* --- Stores --- *@
        @if (Model.Stores.Any())
        {
            <h4 class="mt-5 mb-3 text-crimson">Cửa hàng</h4>
            <div class="row g-4">
                @foreach (var s in Model.Stores)
                {
                    <div class="col-lg-3 col-md-4 col-sm-6">
                        <div class="store-card card h-100 border-0 shadow-sm hover-scale text-center p-3">
                            <a asp-controller="Store" asp-action="Detail" asp-route-id="@s.Id">
                                <img src="@s.Avatar" alt="@s.Name"
                                     class="rounded-circle mx-auto d-block mb-3"
                                     style="width:100px;height:100px;object-fit:cover;" />
                            </a>
                            <h6 class="fw-bold text-truncate">@s.Name</h6>
                            <p class="small text-muted">@s.Province</p>
                            <div class="rating text-warning mb-2">
                                @if (s.Rating <= 0)
                                {
                                    <span class="text-muted small fst-italic">Chưa có đánh giá</span>
                                }
                                else
                                {
                                    <i class="bi bi-star-fill"></i> @s.Rating.ToString("0.0")
                                }
                            </div>
                            <a asp-controller="Store" asp-action="Detail" asp-route-id="@s.Id"
                               class="btn btn-outline-danger btn-sm rounded-pill w-100">Xem cửa hàng</a>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>


<!-- token ẩn cho QuickAdd -->
<form id="__quickAddToken" style="display:none;">
    @Html.AntiForgeryToken()
</form>


@section Scripts {
    <!-- bê nguyên script từ Home qua -->
    <script>
        (() => {
            if (window.__QuickAddBound2) return;
            window.__QuickAddBound2 = true;

            const getToken = () => document.querySelector('#__quickAddToken input[name="__RequestVerificationToken"]')?.value || null;
            const ANTIFORGERY = getToken();
            const BUY_NOW_KEY = '__BUY_NOW_PIDS';
            const toastOk = (m) => window.showToast ? showToast(m, true) : alert(m);

            async function quickAdd(pid) {
                const fd = new FormData();
                fd.append('productId', pid);
                fd.append('quantity', '1');

                const headers = { 'X-Requested-With': 'XMLHttpRequest' };
                const token = ANTIFORGERY || document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                if (token) headers['RequestVerificationToken'] = token;

                const res = await fetch('/Cart/QuickAdd', {
                    method: 'POST', body: fd, headers, credentials: 'same-origin'
                });
                const data = await res.json().catch(() => ({}));
                return { ok: res.ok && data?.success, data, status: res.status };
            }

            async function selectServer(pid, selected = true) {
                try {
                    const fd = new FormData();
                    fd.append('productId', pid);
                    fd.append('selected', String(selected));

                    const headers = { 'X-Requested-With': 'XMLHttpRequest' };
                    const token = ANTIFORGERY || document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    if (token) headers['RequestVerificationToken'] = token;

                    const res = await fetch('/Cart/Select', {
                        method: 'POST', body: fd, headers, credentials: 'same-origin'
                    });
                    return res.ok;
                } catch { return false; }
            }

            function selectLocalBuyNow(pid) {
                try {
                    const arr = JSON.parse(localStorage.getItem(BUY_NOW_KEY) || '[]');
                    if (!arr.includes(pid)) arr.push(pid);
                    localStorage.setItem(BUY_NOW_KEY, JSON.stringify(arr));
                } catch { }
            }

            document.addEventListener('click', async (e) => {
                const addBtn = e.target.closest('.add-to-cart-btn');
                const buyBtn = e.target.closest('.buy-now-btn');
                if (!addBtn && !buyBtn) return;

                e.preventDefault();
                const btn = addBtn || buyBtn;
                const pid = btn.dataset.productId;
                if (!pid) return;

                const hasVariant = (btn.dataset.hasVariant || 'false') === 'true';
                const prevText = btn.textContent;
                btn.disabled = true;

                // ==== MUA NGAY ====
                if (buyBtn) {
                    try {
                        if (hasVariant) {
                            window.location.href = `/Products/DetailProducts/${pid}`;
                            return;
                        }

                        const { ok, data, status } = await quickAdd(pid);
                        if (ok) {
                            const ticked = await selectServer(pid, true);
                            if (!ticked) selectLocalBuyNow(pid);
                            toastOk(data.message || 'Đã thêm vào giỏ hàng!');
                            window.location.href = '/Cart';
                            return;
                        }

                        if (status === 401 || String(data?.message || '').toLowerCase().includes('đăng nhập')) {
                            window.location.href = '/Login';
                            return;
                        }

                        window.location.href = `/Products/DetailProducts/${pid}`;
                    } catch (err) {
                        console.error(err);
                        window.location.href = `/Products/DetailProducts/${pid}`;
                    } finally {
                        btn.disabled = false;
                        btn.textContent = prevText;
                    }
                    return;
                }

                // ==== THÊM ====
                if (addBtn) {
                    try {
                        const { ok, data, status } = await quickAdd(pid);
                        if (ok) {
                            if (typeof window.__CartBadge?.set === 'function' && typeof data.cartCount === 'number') {
                                window.__CartBadge.set(data.cartCount);
                            } else if (typeof window.__CartBadge?.add === 'function') {
                                window.__CartBadge.add(1);
                            }
                            toastOk(data.message || 'Đã thêm vào giỏ hàng!');
                            return;
                        }

                        if (status === 401 || String(data?.message || '').toLowerCase().includes('đăng nhập')) {
                            window.location.href = '/Login';
                            return;
                        }

                        window.location.href = `/Products/DetailProducts/${pid}`;
                    } catch (err) {
                        console.error(err);
                        window.location.href = `/Products/DetailProducts/${pid}`;
                    } finally {
                        btn.disabled = false;
                        btn.textContent = prevText;
                    }
                }
            }, false);
        })();
    </script>
}