@using DATN_GO.Models
@{
    var useContainer = ViewData["UseContainer"] as bool? ?? true;
    var cartCount = Context.Session.GetInt32("CartCount") ?? 0;
    var fullname = Context.Session.GetString("FullName");
    // Lấy StoreStatus từ ViewData (có thể null nếu controller khác chưa set)
    // Dùng pattern matching cho an toàn:
    StoreStatus? storeStatus = ViewData["StoreStatus"] is StoreStatus s ? s : (StoreStatus?)null;
    // hoặc nếu muốn default:
    // var storeStatus = ViewData["StoreStatus"] is StoreStatus s ? s : StoreStatus.Inactive;
}


<!doctype html>
<html lang="en">

<head>
    <title>Title</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/9.0.0/mdb.min.css" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital@0;1&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous" />


    <link rel="stylesheet" href="" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <!-- Google Fonts
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <!-- MDB -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/9.0.0/mdb.min.css" rel="stylesheet" />
    <!-- AOS CSS -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <!-- Owl Carousel CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">
    <!-- Bootstrap Select CSS -->
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/css/bootstrap-select.min.css">

    <link rel="stylesheet" href="~/css/homestyle.css" />
    <style>
        /* Nút tròn mở chat */
        #aiChatFab {
            position: fixed;
            right: 20px;
            bottom: 20px;
            z-index: 1065;
            width: 56px;
            height: 56px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 8px 24px rgba(0,0,0,.2);
        }

        /* Hộp chat */
        #aiChatBox {
            position: fixed;
            right: 20px;
            bottom: 86px;
            z-index: 1065;
            width: 360px;
            max-height: 70vh;
            display: none;
            box-shadow: 0 12px 28px rgba(0,0,0,.18);
            border-radius: 12px;
            overflow: hidden;
            background: #fff;
            border: 1px solid rgba(0,0,0,.08);
        }

        #aiChatHeader {
            background: #dc143c;
            color: #fff;
            padding: 10px 12px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        #aiChatMessages {
            padding: 12px;
            height: 360px;
            overflow-y: auto;
            background: #fafafa;
        }

        .ai-bubble {
            margin: 8px 0;
            padding: 10px 12px;
            border-radius: 10px;
            max-width: 85%;
            white-space: pre-wrap;
        }

            .ai-bubble.user {
                background: #e9f2ff;
                align-self: flex-end;
                margin-left: auto;
            }

            .ai-bubble.bot {
                background: #fff;
                border: 1px solid #eee;
            }

        #aiChatInputBar {
            display: flex;
            gap: 8px;
            padding: 10px;
            border-top: 1px solid #eee;
            background: #fff;
        }

        #aiMsg {
            flex: 1;
        }

        #aiChatMessages a {
            text-decoration: none;
        }

            #aiChatMessages a:hover {
                text-decoration: underline;
            }
    </style>

</head>

<body>
    <header class="bg-crimson mb-3">
        <nav class="container navbar navbar-expand-lg navbar-light bg-crimson shadow-none py-2">
            <div class="container-fluid px-0">
                <div class="row w-100 align-items-center flex-nowrap gx-2">
                    <!-- Logo -->
                    <div class="col-auto d-flex align-items-center">
                        <a class="navbar-brand d-flex align-items-center p-0" asp-controller="Home" asp-action="Index">
                            <img src="~/images/logo.png" alt="Logo"  height="50" style="object-fit:contain;">
                        </a>
                    </div>
                    <!-- Search (desktop only) -->
                    <div class="col flex-grow-1 d-none d-lg-block">
                        <form class="d-flex" asp-action="Search" asp-controller="Home" method="get" style="max-width: 400px; margin: 0 auto;">
                            <input class="form-control form-control-sm rounded-pill w-100"
                                   type="search" name="query" placeholder="Tìm kiếm sản phẩm hoặc cửa hàng" aria-label="Search">
                        </form>
                    </div>
                    <!-- Menu, Cart, Account (desktop only) -->
                    <div class="col-auto d-none d-lg-flex align-items-center gap-3">
                        <!-- Menu (navbar links) -->
                        <div>
                            <div class="collapse navbar-collapse" id="mainNavbar">
                                <ul class="navbar-nav mb-2 mb-lg-0 fw-bold flex-row gap-3 align-items-center">
                                    <li class="nav-item">
                                        <a class="nav-link active text-crimson d-flex align-items-center gap-1"
                                           aria-current="page" asp-controller="Home" asp-action="Index">
                                            Trang chủ
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link text-crimson d-flex align-items-center gap-1"
                                           asp-controller="Store" asp-action="Store">
                                            Cửa hàng
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link text-crimson d-flex align-items-center gap-1"
                                           asp-controller="Products" asp-action="Products">
                                            Sản phẩm
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link text-crimson d-flex align-items-center gap-1"
                                           asp-controller="VoucherAdmin" asp-action="Index">
                                           Ưu đãi
                                        </a>
                                    </li>
<li class="nav-item">
    @if (string.IsNullOrEmpty(fullname))
    {
        <!-- Nếu chưa đăng nhập -->
        <a class="nav-link text-crimson d-flex align-items-center gap-1"
           asp-controller="UserAuthentication" asp-action="Login">
            Kênh người bán
        </a>
    }
    else if (storeStatus == StoreStatus.PendingApproval || storeStatus == StoreStatus.NotApproved)
    {
        <a class="nav-link text-crimson d-flex align-items-center gap-1"
           asp-controller="SalesRegistration" asp-action="PendingApproval">
            Kênh người bán
        </a>
    }
    else if (storeStatus == StoreStatus.Rejected)
    {
        <a class="nav-link text-crimson d-flex align-items-center gap-1"
           asp-controller="SalesRegistration" asp-action="SalesRegistration">
            Kênh người bán
        </a>
    }
    else if (storeStatus == StoreStatus.Active)
    {
        <a class="nav-link text-crimson d-flex align-items-center gap-1"
           asp-controller="Home" asp-action="Index" asp-area="Seller">
            Kênh người bán
        </a>
    }
    else
    {
        <a class="nav-link text-crimson d-flex align-items-center gap-1"
           asp-controller="SalesRegistration" asp-action="SalesRegistration">
            Kênh người bán
        </a>
    }
</li>

                                    @*                                     <li class="nav-item">
                                    <a class="nav-link text-crimson d-flex align-items-center gap-1"
                                    asp-controller="Blog" asp-action="Blog">
                                    Bài viết
                                    </a>
                                    </li> *@
                                </ul>
                            </div>
                        </div>
                        <!-- Cart -->
                        <a asp-action="Index" asp-controller="Cart" class="nav-link position-relative align-items-center p-0">
                            <i class="bi bi-cart-fill text-white icon-md header-icon"></i>
                            <span class="cart-count-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-white text-crimson"
                                  style="font-size:0.7rem; @(cartCount > 0 ? "" : "display:none;")">@cartCount</span>
                        </a>
                        @{
                            var fullName = Context.Session.GetString("FullName");
                        }
                        <div class="dropdown d-none d-lg-flex align-items-center gap-1 mx-2">
                            <button class="account btn btn-crimson dropdown-toggle text-white border-bottom d-flex align-items-center gap-1 py-1 px-2"
                                    type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person-circle icon-md header-icon"></i> Tài khoản
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                                @if (string.IsNullOrEmpty(fullName))
                                {
                                    <!-- Chưa đăng nhập -->
                                    <li>
                                        <a class="dropdown-item d-flex align-items-center gap-2" asp-action="Login" asp-controller="UserAuthentication">
                                            <i class="bi bi-person-circle icon-sm"></i> Đăng
                                            nhập
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item d-flex align-items-center gap-2" asp-action="Register" asp-controller="UserAuthentication">
                                            <i class="bi bi-person-plus-fill icon-sm"></i> Đăng
                                            ký
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <!-- Đã đăng nhập -->
                                    <li>
                                        <span class="dropdown-item text-muted d-flex align-items-center gap-2">
                                            <i class="bi bi-person-check icon-sm"></i> Xin chào, @fullName
                                        </span>
                                    </li>
                                    
                                    <li>
                                        <a class="dropdown-item d-flex align-items-center gap-2" asp-controller="Profile"
                                           asp-action="Index">
                                            <i class="bi bi-person-square icon-sm"></i> Thông tin cá
                                            nhân
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item d-flex align-items-center gap-2"
                                           asp-controller="UserAuthentication" asp-action="Logout">
                                            <i class="bi bi-box-arrow-right icon-sm"></i> Đăng xuất
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <!-- Nút menu hamburger chỉ hiện ở mobile, luôn nằm bên phải -->
                    <div class="col-auto d-block d-lg-none ms-auto">
                        <button class="navbar-toggler text-white p-2" type="button" data-bs-toggle="offcanvas"
                                data-bs-target="#offcanvasExample" aria-controls="offcanvasExample"
                                aria-label="Toggle navigation">
                            <i class="bi bi-list icon-lg"></i>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <!-- Offcanvas Menu -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasExample" aria-labelledby="offcanvasExampleLabel">
        <div class="offcanvas-header bg-crimson text-white">
            <h5 class="offcanvas-title" id="offcanvasExampleLabel">Menu</h5>
            <button type="button" class="btn-close text-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="d-flex flex-column">
                <!-- Search form and cart -->
                <div class="mb-3">
                    <div class="d-flex align-items-center">
                        <form class="d-flex flex-grow-1" asp-action="Search" asp-controller="Home" method="get">
                            <input class="form-control me-2 rounded-pill" name="query" type="search"
                                   placeholder="Tìm kiếm sản phẩm hoặc cửa hàng" aria-label="Search">
                        </form>
                        <a asp-action="Index" asp-controller="Cart" class="nav-link text-crimson position-relative ms-2">
                            <i class="bi bi-cart-fill icon-md"></i>
                            <span class="cart-count-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-crimson text-white"
                                  style="font-size:0.7rem; @(cartCount > 0 ? "" : "display:none;")">@cartCount</span>
                        </a>
                    </div>
                </div>

                <!-- Navigation links -->
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link active text-crimson d-flex align-items-center gap-2"
                           asp-controller="Home" asp-action="Index">
                            <i class="bi bi-house-door"></i>
                            Trang chủ
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-crimson d-flex align-items-center gap-2"
                           asp-controller="Store" asp-action="Store">
                            <i class="bi bi-shop"></i>
                            Cửa hàng
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-crimson d-flex align-items-center gap-2"
                           asp-controller="Products" asp-action="Products">
                            <i class="bi bi-box"></i>
                            Sản phẩm
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-crimson d-flex align-items-center gap-2"
                           asp-controller="VoucherAdmin" asp-action="Index">
                            <i class="bi bi-ticket-perforated"></i>
                            Ưu đãi
                        </a>
                    </li>
                </ul>

                <!-- User actions -->
                @{
                    var fullNameMobile = Context.Session.GetString("FullName");
                }
                <div class="mt-3">
                    @if (string.IsNullOrEmpty(fullNameMobile))
                    {
                        <!-- Chưa đăng nhập -->
                        <a class="btn btn-crimson w-100 mb-2 d-flex align-items-center justify-content-center gap-2"
                           asp-action="Login" asp-controller="UserAuthentication">
                            <i class="bi bi-person-circle"></i>
                            Đăng nhập
                        </a>
                        <a class="btn btn-outline-crimson w-100 d-flex align-items-center justify-content-center gap-2"
                           asp-action="Register" asp-controller="UserAuthentication">
                            <i class="bi bi-person-plus-fill"></i>
                            Đăng ký
                        </a>
                    }
                    else
                    {
                        <!-- Đã đăng nhập -->
                        <div class="text-center mb-3 p-2 bg-light rounded">
                            <small class="text-muted d-flex align-items-center justify-content-center gap-2">
                                <i class="bi bi-person-check"></i>
                                Xin chào, @fullNameMobile
                            </small>
                        </div>

                        <a class="btn btn-outline-crimson w-100 mb-2 d-flex align-items-center justify-content-center gap-2"
                           asp-controller="Profile" asp-action="Index">
                            <i class="bi bi-person-square"></i>
                            Thông tin cá nhân
                        </a>

                        <a class="btn btn-crimson w-100 d-flex align-items-center justify-content-center gap-2"
                           asp-controller="UserAuthentication" asp-action="Logout">
                            <i class="bi bi-box-arrow-right"></i>
                            Đăng xuất
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (useContainer)
    {
        <div class="container">
            @RenderBody()
        </div>
    }
    else
    {
        @RenderBody()
    }



    <footer class="bg-crimson text-white py-4">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <h6 class="text-uppercase mb-3">Về Chúng Tôi</h6>
                    <ul class="list-unstyled">
                        <li class="mb-3"><a  asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Giới thiệu</a></li>
                        <li class="mb-3"><a  asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Quy chế</a></li>
                        <li class="mb-3"><a  asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Bảo mật thông tin</a></li>
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Giấy phép</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <h6 class="text-uppercase mb-3">Dịch Vụ Khách Hàng</h6>
                    <ul class="list-unstyled">
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Trợ giúp</a></li>
                        <li class="mb-3">
                            <a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Giải quyết khiếu nại</a>
                        </li>
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Liên hệ</a></li>
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">CSKH</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <h6 class="text-uppercase mb-3">Công Việc</h6>
                    <ul class="list-unstyled">
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Hợp tác bán hàng</a></li>
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Hợp tác vận chuyển</a></li>
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Liên hệ công việc</a></li>
                        <li class="mb-3"><a asp-controller="policy" asp-action="Index" class="text-white text-decoration-none">Quảng cáo</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6 text-center">
                    <a asp-controller="Home" asp-action="Index">
                        <img src="~/images/logo.png" alt="Logo GO" class="img-fluid mb-3" height="70">

                    </a>
                    <div>
                        <a href="#" class="text-white me-3"><i class="fab fa-facebook-f footer-social-icon"></i></a>
                        <a href="#" class="text-white me-3"><i class="fab fa-instagram footer-social-icon"></i></a>
                        <a href="#" class="text-white me-3"><i class="fab fa-youtube footer-social-icon"></i></a>
                        <a href="#" class="text-white"><i class="fab fa-tiktok footer-social-icon"></i></a>
                    </div>
                </div>
            </div>
            <hr class="my-4">
            <div class="">
                <p class="small">
                    Toà nhà FPT Polytechnic, đường số 22, phường Thường Thạnh, quận Cái Răng, TP. Cần Thơ
                </p>

                <ul class="list-inline small">
                    <li class="list-inline-item">
                        <a href="#" class="text-white text-decoration-none">Privacy Policy</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="#" class="text-white text-decoration-none">Terms of Use</a>
                    </li>
                    <li class="list-inline-item">
                        <a href="#" class="text-white text-decoration-none">Accessibility</a>
                    </li>
                    <li class="list-inline-item"><a href="#" class="text-white text-decoration-none">Sitemap</a></li>
                </ul>
                <p class="small">GO: mamnon02@gmail.com</p>
            </div>
        </div>

    </footer>





    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/lib/popper.js/umd/popper.min.js"></script>
    <script src="~/js/Address.js"></script>
    <script src="~/js/Carousel.js"></script>
    <script src="~/js/Cart.js"></script>
    <script src="~/js/ConfirmationCode.js"></script>
    <script src="~/js/DetailProduct.js"></script>
    <script src="~/js/NotificationToast.js"></script>
    <script src="~/js/Orders.js"></script>
    <script src="~/js/Profile.js"></script>
    <script src="~/js/SalesRegistration.js"></script>
    <script src="~/js/Vouchers.js"></script>



    <script src="~/js/Toast.js"></script>

    <script src="~/js/checkboxcart.js"></script>


    <!-- Bootstrap JavaScript Libraries -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
      integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
      crossorigin="anonymous">
    </script> -->

    <script src="./Scripts/Carousel.js"></script>

    <!-- AOS JS -->
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <!-- jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- Owl Carousel JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/js/bootstrap-select.min.js"></script>
    <script>
        function previewImage(input, imgId, promptId) {
            const file = input.files[0];
            const img = document.getElementById(imgId);
            const prompt = document.getElementById(promptId);
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    img.src = e.target.result;
                    img.classList.remove('d-none');
                    if (prompt) prompt.classList.add('d-none');
                };
                reader.readAsDataURL(file);
            } else {
                img.src = '';
                img.classList.add('d-none');
                if (prompt) prompt.classList.remove('d-none');
            }
        }
    </script>
    <script>
        AOS.init({
            duration: 800,
            offset: 100,
            once: true
        });
    </script>
    <script>
        $(document).ready(function () {
            $('.category-carousel').owlCarousel({
                loop: true,
                margin: 10,
                nav: true,
                dots: false,
                navText: [
                    '<i class="bi bi-chevron-left"></i>',
                    '<i class="bi bi-chevron-right"></i>'
                ],
                responsive: {
                    0: {
                        items: 3,
                        margin: 5
                    },
                    400: {
                        items: 4,
                        margin: 10
                    },
                    576: {
                        items: 5
                    },
                    768: {
                        items: 6
                    },
                    992: {
                        items: 7
                    },
                    1200: {
                        items: 8
                    }
                },
                onInitialized: function () {
                    setTimeout(function () {
                        $('.scroll-indicator').fadeOut();
                    }, 3000);
                }
            });
        });
    </script>



    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1056">
        @if (TempData["ToastMessage"] != null && TempData["ToastType"] != null)
        {
            var toastType = TempData["ToastType"].ToString();
            var isSuccess = toastType == "success";
            <div class="toast @(isSuccess ? "" : "mt-3")" role="alert" aria-live="assertive" aria-atomic="true"
                 id="autoToast">
                <div class="toast-header @(isSuccess ? "bg-success" : "bg-danger") text-white">
                    <img src="@(isSuccess ? "/icons/happy.gif" : "/icons/sad.gif")" class="rounded me-2"
                         alt="@(isSuccess ? "Success" : "Error")" width="20" height="20">
                    <strong class="me-auto">@((isSuccess) ? "Thành công" : "Lỗi")</strong>
                    <small>Vừa xong</small>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"
                            aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @TempData["ToastMessage"]
                </div>
            </div>
        }
    </div>
    @await RenderSectionAsync("Scripts", required: false)
    <!-- Floating Chat AI -->
    <button id="aiChatFab" class="chat-fab">
        <i class="bi bi-chat-dots-fill"></i>
    </button>

    <div id="aiChatBox" class="chatbox shadow-lg">
        <!-- Header -->
        <div class="chatbox-header">
            <div class="d-flex align-items-center gap-2">
@*                 <img src="https://postimg.cc/kRm2b88X" width="28" height="28" class="rounded-circle border" alt="bot" />
 *@                <strong>Trợ lý GỜ Ô </strong>
            </div>
            <button id="aiChatClose" class="btn btn-sm btn-light rounded-circle">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <!-- Messages -->
        <div id="aiChatMessages" class="chatbox-body"></div>

        <!-- Input -->
        <div class="chatbox-footer">
            <input id="aiMsg" class="form-control" placeholder="Nhập tin nhắn..." />
            <button id="aiSend" class="btn btn-crimson rounded-circle">
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
    </div>
    <!-- /Floating Chat AI -->
  


    <script>
        (function () {
            const API_URL = 'https://localhost:7096/api/ai/chat';

            const fab = document.getElementById('aiChatFab');
            const box = document.getElementById('aiChatBox');
            const close = document.getElementById('aiChatClose');
            const msgs = document.getElementById('aiChatMessages');
            const input = document.getElementById('aiMsg');
            const send = document.getElementById('aiSend');

            function toggle() {
                box.style.display = (box.style.display === 'none' || !box.style.display) ? 'block' : 'none';
            }

            function addBubble(text, who) {
                const div = document.createElement('div');
                div.className = 'ai-bubble ' + (who === 'user' ? 'user' : 'bot');

                if (who === 'user') {
                    div.textContent = text; // User message dùng textContent
                } else {
                    // Bot message: convert text thành HTML có thể click
                    div.innerHTML = formatBotMessage(text);
                }

                msgs.appendChild(div);
                msgs.scrollTop = msgs.scrollHeight;
            }

            // Function chuyển đổi text thành HTML clickable
                    // Function chuyển đổi text thành HTML clickable
        function formatBotMessage(text) {
            if (!text) return '';

            // Bước 1: Escape HTML nguy hiểm
            let html = text
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');

            // Bước 2: Chuyển URLs thành links (chỉ hiển thị 1 lần)
            html = html.replace(
                /🔗\s*(https?:\/\/[^\s<>"{}|\\^`\[\]]+)/g,
                '<a href="$1" class="text-crimson fw-semibold text-decoration-underline" target="_blank" rel="noopener">🔗 XEM NGAY</a>'
            );

            // Bước 3: Chuyển **text** thành <strong>
            html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

            // Bước 4: Chuyển \n thành <br>
            html = html.replace(/\n/g, '<br>');

            // Bước 5: Thêm style cho icons
            html = html.replace(/🛍️/g, '<span style="color: #dc143c;">🛍️</span>');
            html = html.replace(/💰/g, '<span style="color: #ffa500;">💰</span>');
            html = html.replace(/📦/g, '<span style="color: #4169e1;">📦</span>');

            return html;
        }

            async function ask() {
                const text = input.value.trim();
                if (!text) return;

                // Hiển thị câu hỏi của user
                addBubble(text, 'user');
                input.value = '';

                // Chặn spam trong lúc chờ
                send.disabled = true;
                input.disabled = true;

                // Bubble chờ
                const wait = document.createElement('div');
                wait.className = 'ai-bubble bot';
                wait.innerHTML = '<i class="bi bi-three-dots" style="animation: blink 1s infinite;"></i> Đang suy nghĩ...';
                msgs.appendChild(wait);
                msgs.scrollTop = msgs.scrollHeight;

                try {
                    const res = await fetch(API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: text })
                    });

                    // Cố đọc JSON; nếu lỗi thì data = {}
                    let data = {};
                    try {
                        data = await res.json();
                    } catch (e) {
                        console.log('JSON parse error:', e);
                    }

                    // QUAN TRỌNG: Sử dụng innerHTML với formatBotMessage
                    const botReply = (data && data.answer) ? data.answer : '[AI không phản hồi]';
                    wait.innerHTML = formatBotMessage(botReply);
                    msgs.scrollTop = msgs.scrollHeight;

                } catch (e) {
                    wait.innerHTML = '<span style="color: red;">[Lỗi kết nối AI] ' + e.message + '</span>';
                    console.error('API error:', e);
                } finally {
                    send.disabled = false;
                    input.disabled = false;
                    input.focus();
                }
            }

            fab.addEventListener('click', toggle);
            close.addEventListener('click', toggle);
            send.addEventListener('click', ask);
            input.addEventListener('keydown', e => { if (e.key === 'Enter') ask(); });

            // Auto focus khi mở chatbox
            fab.addEventListener('click', () => {
                setTimeout(() => input.focus(), 300);
            });
        })();
    </script>

    <style>
        /* Thêm CSS cho chat links */
        #aiChatMessages a {
            color: #dc143c !important;
            text-decoration: underline !important;
            font-weight: 600 !important;
            transition: all 0.2s ease;
        }

            #aiChatMessages a:hover {
                color: #a01030 !important;
                text-decoration: none !important;
                background-color: rgba(220, 20, 60, 0.1);
                padding: 2px 4px;
                border-radius: 4px;
            }

        /* Animation cho loading */

        }
    </style>

</body>


</html>

<script src="https://accounts.google.com/gsi/client" async defer></script>

<script>
    window.onload = function () {
        google.accounts.id.initialize({
            client_id: "185130462575-kq61q46pbt3dggk8f6sgaes2hc321lgq.apps.googleusercontent.com",
            callback: handleGoogleLogin,
            auto_select: false, // không tự đăng nhập
            ux_mode: "popup"    // bật popup chọn tài khoản
        });

        // Kiểm tra element tồn tại trước khi thêm event listener
        const googleLoginBtn = document.getElementById("googleLoginBtn");
        if (googleLoginBtn) {
            googleLoginBtn.addEventListener("click", function () {
                google.accounts.id.prompt(); // gọi popup chọn tài khoản
            });
        }
    };

    function handleGoogleLogin(response) {
        const id_token = response.credential;

        fetch('/UserAuthentication/LoginWithGoogle', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ idToken: id_token })
        })
            .then(async res => {
                if (res.ok) {
                    const data = await res.json();
                    localStorage.setItem("toastMessage", `Chào mừng ${data.fullName}, bạn đã đăng nhập bằng Google thành công!`);
                    localStorage.setItem("toastType", "success");
                    window.location.href = '/';
                } else {
                    alert("Đăng nhập bằng Google thất bại!");
                }
            })
            .catch(err => {
                console.error("Google login error:", err);
            });
    }

    function showToast(message, isSuccess = true) {
        const iconUrl = isSuccess ? "/icons/happy.gif" : "/icons/sad.gif";
        const title = isSuccess ? "Thành công" : "Lỗi";

        const toastHtml = `
                            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" id="dynamicToast"
                                 style="position: fixed; top: 1rem; right: 1rem; z-index: 1060; min-width: 320px;">
                                <div class="toast-header d-flex align-items-center ${isSuccess ? "bg-success" : "bg-danger"} text-white">
                                    <img src="${iconUrl}" alt="icon" width="20" height="20" class="me-2" />
                                    <strong class="me-auto">${title}</strong>
                                    <small class="text-white">Vừa xong</small>
                                    <button type="button" class="btn-close btn-close-white ms-2" onclick="this.closest('.toast').remove()" aria-label="Close"></button>
                                </div>
                                <div class="toast-body">${message}</div>
                            </div>
                        `;
        document.body.insertAdjacentHTML('beforeend', toastHtml);
        setTimeout(() => document.getElementById('dynamicToast')?.remove(), 3000);
    }
    function mdToHtml(s) {
        if (!s) return '';
        return s
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g,
                '<a href="$2" class="text-crimson fw-semibold" target="_self" rel="noopener">$1</a>')
            .replace(/\n/g, '<br>');
    }
    window.addEventListener('DOMContentLoaded', function () {
        const message = localStorage.getItem("toastMessage");
        const type = localStorage.getItem("toastType");

        if (message && type) {
            showToast(message, type === "success");
            localStorage.removeItem("toastMessage");
            localStorage.removeItem("toastType");
        }
    });
</script>

@* CART *@
<script>
    (function () {
        // ===== TRUST WRITE FENCE: chỉ server-refresh được phép set =====
        const TRUST_KEY = Math.random().toString(36).slice(2);
        let scheduleTimer = null;

        // ===== UI + ANIMATION =====
        const getBadges = () => Array.from(document.querySelectorAll('.cart-count-badge'));
        const style = document.createElement('style');
        style.textContent = `
    @@keyframes cart-bump {
          0%{transform:translate(-50%,-50%) scale(1)}
          30%{transform:translate(-50%,-50%) scale(1.15)}
          100%{transform:translate(-50%,-50%) scale(1)}
        }
        .cart-count-badge.bump { animation: cart-bump 250ms ease; }
      `;
        document.head.appendChild(style);

        function show(el, n) { el.style.display = n > 0 ? '' : 'none'; }

        function animateTo(el, target, opts = { trusted: false }) {
            const current = parseInt(el.textContent || '0') || 0;

            // nếu không trusted (local try-set) → đừng animate, chỉ queue refresh
            if (!opts.trusted) { return; }

            if (current === target) { show(el, target); return; }
            const diff = target - current, steps = Math.min(12, Math.abs(diff)), step = diff / steps;
            let i = 0; el.classList.add('bump');
            const t = setInterval(() => {
                i++;
                const v = i < steps ? Math.round(current + step * i) : target;
                el.textContent = v; show(el, v);
                if (i >= steps) { clearInterval(t); setTimeout(() => el.classList.remove('bump'), 200); }
            }, 20);
        }

        function setCartCountTrusted(n, key) {
            if (key !== TRUST_KEY) { scheduleRefresh(); return; } // chỉ nhận từ server-refresh
            const nn = Math.max(0, parseInt(n) || 0);
            getBadges().forEach(b => animateTo(b, nn, { trusted: true }));
            try { localStorage.setItem('cartCount', String(nn)); } catch { }
        }

        function scheduleRefresh() {
            clearTimeout(scheduleTimer);
            scheduleTimer = setTimeout(refreshCartCount, 150);
        }

        // Public API: chặn set/add local → chỉ schedule refresh
        window.__CartBadge = {
            set(n) { scheduleRefresh(); }, // ignore value (no flicker)
            add() { scheduleRefresh(); }  // ignore delta (no flicker)
        };

        // ===== DATA: luôn dùng DISTINCT COUNT từ server =====
        async function refreshCartCount() {
            try {
                // Ưu tiên render sẵn từ server (tin cậy)
                if (typeof window.__CART_COUNT_INIT === 'number') {
                    setCartCountTrusted(window.__CART_COUNT_INIT, TRUST_KEY);
                } else {
                    const r = await fetch('/Cart/Count', { credentials: 'same-origin' });
                    if (!r.ok) throw new Error('count failed');
                    const d = await r.json();
                    const n = Number.isFinite(d?.count) ? d.count : 0; // DISTINCT lines
                    setCartCountTrusted(n, TRUST_KEY);
                }
            } catch (e) {
                console.warn('refreshCartCount error:', e);
                // Fallback: đừng animate từ local để tránh flicker, nhưng vẫn hiển thị nếu trống
                try {
                    const cached = parseInt(localStorage.getItem('cartCount') || '0') || 0;
                    setCartCountTrusted(cached, TRUST_KEY);
                } catch { setCartCountTrusted(0, TRUST_KEY); }
            }
        }

        // ===== WIRING: debounce + đa tab + intercepts =====
        (function wireCartChanged() {
            window.addEventListener('cart:changed', scheduleRefresh);

            // BroadcastChannel sync
            const bc = (function () { try { return new BroadcastChannel('cart'); } catch { return null; } })();
            bc?.addEventListener('message', (ev) => {
                if (ev?.data === 'cart:changed' || ev?.data?.type === 'cart:changed') scheduleRefresh();
                // Bị cài đặt khác tab cố set số? → cũng chỉ refresh
                if (ev?.data?.type === 'cart:count') scheduleRefresh();
            });

            // Quay lại tab → cập nhật lại
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'visible') scheduleRefresh();
            });

            window.__cartBC = bc;
        })();

        // Intercept fetch/XHR: mọi API Cart thành công → chỉ schedule refresh (không set tạm)
        ; (function interceptFetch() {
            if (!window.fetch) return;
            const _fetch = window.fetch;
            window.fetch = function (input, init) {
                const url = typeof input === 'string' ? input : (input?.url || '');
                const p = _fetch(input, init);
                p.then(res => {
                    try {
                        if (res.ok && /\/Cart\/(QuickAdd|Add|Remove|UpdateQuantity|Select|Clear|Momo|Vnpay|Cod|Count)/i.test(url)) {
                            window.dispatchEvent(new CustomEvent('cart:changed'));
                            try { window.__cartBC?.postMessage('cart:changed'); } catch { }
                        }
                    } catch { }
                });
                return p;
            };
        })();

        ; (function interceptXHR() {
            if (!window.XMLHttpRequest) return;
            const _open = XMLHttpRequest.prototype.open;
            const _send = XMLHttpRequest.prototype.send;
            let _url = '';
            XMLHttpRequest.prototype.open = function (method, url) {
                _url = url || '';
                return _open.apply(this, arguments);
            };
            XMLHttpRequest.prototype.send = function (body) {
                this.addEventListener('load', function () {
                    try {
                        if (this.status >= 200 && this.status < 300 &&
                            /\/Cart\/(QuickAdd|Add|Remove|UpdateQuantity|Select|Clear|Momo|Vnpay|Cod|Count)/i.test(_url)) {
                            window.dispatchEvent(new CustomEvent('cart:changed'));
                            try { window.__cartBC?.postMessage('cart:changed'); } catch { }
                        }
                    } catch { }
                });
                return _send.apply(this, arguments);
            };
        })();

        // Storage sync: có ai set localStorage → mình không tin, chỉ refresh
        window.addEventListener('storage', (e) => {
            if (e.key === 'cartCount' && e.newValue != null) scheduleRefresh();
        });

        // INIT
        document.addEventListener('DOMContentLoaded', refreshCartCount);
    })();
</script>
<style>
    /* Floating button */
    .chat-fab {
        position: fixed;
        right: 20px;
        bottom: 20px;
        background: linear-gradient(135deg,#dc3545,#ff6f91);
        color: #fff;
        border: none;
        border-radius: 50%;
        width: 56px;
        height: 56px;
        font-size: 26px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 6px 18px rgba(220,53,69,.5);
        transition: all .25s ease;
        z-index: 1065;
    }

        .chat-fab:hover {
            transform: scale(1.1) rotate(8deg);
            box-shadow: 0 8px 22px rgba(220,53,69,.7);
        }

    /* Chatbox */
    .chatbox {
        position: fixed;
        right: 20px;
        bottom: 86px;
        width: 360px;
        max-height: 75vh;
        background: #fff;
        border-radius: 16px;
        overflow: hidden;
        display: none;
        flex-direction: column;
        z-index: 1065;
        border: 1px solid #eee;
    }

    .chatbox-header {
        background: linear-gradient(135deg,#dc3545,#ff6f91);
        color: #fff;
        padding: 10px 14px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chatbox-body {
        flex: 1;
        padding: 12px;
        overflow-y: auto;
        background: #f8f9fa;
    }

    .chatbox-footer {
        display: flex;
        gap: 8px;
        padding: 10px;
        border-top: 1px solid #eee;
        background: #fff;
    }

        .chatbox-footer input {
            border-radius: 20px;
            padding: 8px 14px;
        }

        .chatbox-footer button {
            width: 42px;
            height: 42px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

    /* Bubble */
    .ai-bubble {
        margin: 6px 0;
        padding: 10px 14px;
        border-radius: 18px;
        max-width: 80%;
        word-wrap: break-word;
        font-size: 14px;
    }

        .ai-bubble.user {
            margin-left: auto;
            background: #dc3545;
            color: #fff;
            border-bottom-right-radius: 6px;
        }

        .ai-bubble.bot {
            margin-right: auto;
            background: #fff;
            border: 1px solid #eee;
            color: #333;
            border-bottom-left-radius: 6px;
        }

</style>