﻿﻿@using DATN_GO.ViewModels
@{
    var images = ViewBag.Images as List<string> ?? new List<string>();
    var variants = ViewBag.VariantOptions as List<VariantWithValuesViewModel>;
    var variantCombinations = ViewBag.VariantCombinations as List<DATN_GO.ViewModels.VariantCombinationViewModel> ?? new
    List<DATN_GO.ViewModels.VariantCombinationViewModel>();
    var priceInfo = ViewBag.MinMaxPrice as DATN_GO.ViewModels.MinMaxPriceResponse;
}
@{
    var reviews = (List<ReviewViewModel>)ViewBag.Reviews ?? new List<ReviewViewModel>();
    var ratingCounts = reviews
        .GroupBy(r => r.Rating)
        .ToDictionary(g => g.Key, g => g.Count());

    var totalReviews = reviews.Count;
    var averageRating = totalReviews > 0 ? reviews.Average(r => r.Rating) : 0;
}

<style>
    .rating i {
        cursor: pointer;
        transition: color 0.2s ease;
    }

        .rating i.text-warning {
            color: gold !important;
        }
</style>

<div class="row mb-5">
    <!-- Product Image Section -->
    <div class="col-md-6 mb-4">
        <!-- Main Carousel -->
        @if (images.Count > 0)
        {
            <!-- Carousel Main -->
            <div id="productCarousel" class="carousel slide mb-3" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @for (int i = 0; i < images.Count; i++)
                    {
                        <div id="mainImage" class="carousel-item active">
                            <img id="mainProductImage" src="@images.FirstOrDefault()" class="d-block w-100 border rounded"
                                 alt="Hình ảnh sản phẩm">
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>

            <!-- Thumbnails with Navigation -->
            @if (variants != null && variants.Count > 0)
            {
                <div class="position-relative">
                    <button class="thumbnail-nav prev" type="button" id="scrollPrev">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div class="thumbnails-container">
                        <div class="thumbnails-wrapper">
                            @for (int i = 0; i < images.Count; i++)
                            {
                                var matchingVariant = variantCombinations.FirstOrDefault(v => v.Image == images[i]);

                                <img src="@images[i]"
                                     class="product-thumbnail @(i == 0 ? "active" : "")"
                                     data-bs-target="#productCarousel"
                                     data-bs-slide-to="@i"
                                     data-variant-value-ids="@(matchingVariant != null ? string.Join(",", matchingVariant.VariantValueIds) : "")" />
                            }
                        </div>
                    </div>
                    <button class="thumbnail-nav next" type="button" id="scrollNext">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            }

        }
        else
        {
            <p>Không có hình ảnh sản phẩm.</p>
        }
    </div>
    <!-- Product Information Section -->
    <div class="col-md-6">
        <!-- Store Information -->
        <div class="pb-2 mb-2 border-bottom">
            <div class="d-flex align-items-center">
                <img src="@ViewBag.StoreLogo" alt="Logo cửa hàng" class="rounded-circle me-2 logo-store"
                     style="width: 48px; height: 48px; object-fit: cover;">
                <div class="flex-grow-1">
                    <h5 class="mb-0">@ViewBag.StoreName</h5>
                    <div class="d-flex align-items-center mt-1">
                        <div class="text-muted me-3">
                            <!--<small>
                                    <i class="fas fa-star text-warning"></i>
                            @($"{ViewBag.Rating} ({ViewBag.Reviews} đánh giá)")
                                </small>-->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Product Information -->
        <h2 class="mb-3">@ViewBag.ProductName</h2>
        <div class="mb-3 d-flex align-items-center">
            <span class="text-danger fw-bold fs-3"
                  style="white-space: nowrap; font-family: Arial, sans-serif; font-size: 16px; font-weight: 600;">
                <span id="productPriceDisplay" class="text-crimson fw-bold fs-3">
                    @if (priceInfo != null)
                    {
                        if (priceInfo.IsVariant)
                        {
                            if (priceInfo.MinPrice == priceInfo.MaxPrice)
                            {
                                @($"{(priceInfo.MinPrice):N0} đ")
                            }
                            else
                            {
                                @($"{(priceInfo.MinPrice):N0} đ - {(priceInfo.MaxPrice):N0} đ")
                            }
                        }
                        else
                        {
                            @($"{(priceInfo.Price):N0} đ")
                        }
                    }
                    else
                    {
                        <span class="text-muted">Không có giá</span>
                    }
                </span>
            </span>
        </div>

        <!-- Rating -->
        <div class="mb-4">
            <div class="d-flex align-items-center">
                <div class="text-warning me-2">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-alt"></i>
                </div>
                <span>4.5 (245 đánh giá)</span>
            </div>
        </div>

        <!-- Product Variants -->
        <!-- Product Variants -->
        <div class="mb-4">
            @if (variants != null)
            {
                @for (int i = 0; i < variants.Count; i++)
                {
                    var variant = variants[i];
                    <div class="mb-3">
                        <h5>@variant.VariantName</h5>
                        <div class="d-flex gap-2 flex-wrap">
                            @foreach (var value in variant.Values)
                            {
                                var inputId = $"variant_{variant.VariantName}_{value.Id}";
                                <input type="radio"
                                       class="btn-check"
                                       name="variant_@variant.VariantName"
                                       id="@inputId"
                                       value="@value.Id"
                                       autocomplete="off" />
                                <label class="btn btn-outline-danger" for="@inputId">
                                    @value.ValueName
                                </label>
                            }
                        </div>
                    </div>
                }
            }
        </div>


        <!-- Quantity Selector -->
        <div class="mb-4">
            <h5>Số lượng</h5>
            <div class="d-flex align-items-center gap-3">
                <div class="input-group quantity-input-group">
                    <button class="btn btn-outline-secondary" type="button" id="btnDecreaseProductQuantity">-</button>
                    <input class="form-control text-center" value="1" min="1" id="productQuantityInput" step="1" style="width: 100%; max-width: 120px;">
                    <button class="btn btn-outline-secondary" type="button" id="btnIncreaseProductQuantity">+</button>
                </div>
                <span class="text-muted" id="productQuantityDisplay">Còn lại: @Model.Quantity sản phẩm</span>
            </div>
        </div>


        <form id="addToCartForm" asp-controller="Cart" asp-action="AddToCart" method="post">
            @Html.AntiForgeryToken()

            <!-- Hidden product ID -->
            <input type="hidden" name="ProductId" value="@Model.Id" />
            <div id="variantInputsContainer"></div>
            <!-- Hidden Quantity -->
            <input type="hidden" name="Quantity" id="QuantityHidden" value="1" />

            <div class="d-grid gap-2 mt-3">
                <button type="submit" class="btn btn-outline-primary btn-lg">Thêm vào giỏ hàng</button>
            </div>
        </form>



    </div>
</div>

<div class="d-flex align-items-center container mb-3">
    <hr class="flex-grow-1 border-danger border-1 opacity-100">
</div>

<div class="mb-4">
    <h3>Thông tin chi tiết:</h3>

    <ul class="list-unstyled text-muted mb-3">
        <li><strong>Nơi xuất xứ:</strong> @Model.PlaceOfOrigin</li>
        <li><strong>Thương hiệu:</strong> @Model.Brand</li>
        <li><strong>Mô tả:</strong> @Model.Description</li>
    </ul>
</div>

<!-- Comments Section -->

<div class="d-flex align-items-center container mb-3 p-0">
    <hr class="flex-grow-1 border-danger border-1 opacity-100">
</div>

<div class="row mt-4">
    <h3>Đánh giá sản phẩm</h3>

    <div class="col-12">

        <div id="commentsSection">
            <div class="mb-3">
                <h5 class="mb-1">Sản phẩm đạt: </h5>
                <div class="d-flex align-items-center">
                    <div class="text-warning me-2">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Floor(averageRating))
                            {
                                <i class="fas fa-star"></i>
                            }
                            else if (i - averageRating < 1)  // sao nửa
                            {
                                <i class="fas fa-star-half-alt"></i>
                            }
                            else
                            {
                                <i class="far fa-star"></i>
                            }
                        }
                    </div>
                    <span class="fw-bold">@averageRating.ToString("0.0")/5</span>
                    <span class="text-muted ms-2">(@totalReviews đánh giá)</span>
                </div>
            </div>

            <!-- Comment Filters -->
            <div class="d-flex flex-wrap gap-3 mb-4 align-items-center">
                <div class="d-flex align-items-center">
                    <span class="me-2">Sắp xếp theo:</span>
                    <select class="form-select form-select-sm" style="width: auto;">
                        <option value="latest">Mới nhất</option>
                        <option value="oldest">Cũ nhất</option>
                    </select>

                </div>
                <div class="d-flex gap-2 flex-wrap">
                    <button class="btn btn-outline-danger btn-sm rating-filter active" data-rating="">
                        Tất cả (@totalReviews)
                    </button>
                    <button class="btn btn-outline-danger btn-sm rating-filter" data-rating="5">
                        5 <i class="fas fa-star text-warning"></i> (@(ratingCounts.ContainsKey(5) ? ratingCounts[5] : 0))
                    </button>
                    <button class="btn btn-outline-danger btn-sm rating-filter" data-rating="4">
                        4 <i class="fas fa-star text-warning"></i> (@(ratingCounts.ContainsKey(4) ? ratingCounts[4] : 0))
                    </button>
                    <button class="btn btn-outline-danger btn-sm rating-filter" data-rating="3">
                        3 <i class="fas fa-star text-warning"></i> (@(ratingCounts.ContainsKey(3) ? ratingCounts[3] : 0))
                    </button>
                    <button class="btn btn-outline-danger btn-sm rating-filter" data-rating="2">
                        2 <i class="fas fa-star text-warning"></i> (@(ratingCounts.ContainsKey(2) ? ratingCounts[2] : 0))
                    </button>
                    <button class="btn btn-outline-danger btn-sm rating-filter" data-rating="1">
                        1 <i class="fas fa-star text-warning"></i> (@(ratingCounts.ContainsKey(1) ? ratingCounts[1] : 0))
                    </button>

                </div>

            </div>
            <!-- Write Comment -->
            @if (ViewBag.CanReview)
            {
                <div class="mb-4 border-bottom pb-4">
                    <form id="commentForm" asp-action="Create" asp-controller="Review" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="ProductId" value="@Model.Id" />
                        <input type="hidden" name="Rating" id="ratingInput" value="5" />
                        <input type="hidden" id="OrderId" name="OrderId" value="@ViewBag.OrderId" />

                        <div class="mb-3">
                            <label class="form-label">Đánh giá của bạn</label>
                            <div class="rating mb-3">
                                <i class="far fa-star fs-5" data-rating="1"></i>
                                <i class="far fa-star fs-5" data-rating="2"></i>
                                <i class="far fa-star fs-5" data-rating="3"></i>
                                <i class="far fa-star fs-5" data-rating="4"></i>
                                <i class="far fa-star fs-5" data-rating="5"></i>
                            </div>
                            <textarea id="comment" name="CommentText" class="form-control" rows="4" required></textarea>


                        </div>

                        <div class="mb-3">
                            <label class="form-label">Thêm hình ảnh (tối đa 3 ảnh)</label>
                            <div class="d-flex gap-3">
                                @for (int i = 1; i <= 3; i++)
                                {
                                    var inputId = $"imageInput{i}";
                                    var previewId = $"imagePreview{i}";
                                    <div class="position-relative d-inline-block text-center">
                                        <img id="@previewId" src="https://via.placeholder.com/120?text=Ảnh+@i"
                                             style="width:120px;height:120px;object-fit:cover;cursor:pointer;">
                                        <input type="file" id="@inputId" name="mediaFiles" accept="image/*" class="d-none">
                                        <label for="@inputId" class="position-absolute bottom-0 end-0 bg-white p-2 shadow-sm"
                                               style="cursor:pointer;">
                                            <i class="bi bi-camera-fill text-crimson"></i>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <button type="submit" class="btn btn-crimson">Gửi đánh giá</button>
                    </form>
                </div>
            }
            else
            {
                <p class="text-muted"></p>
            }
            <!-- Comments List -->
            <div class="comments-list">
                @if (ViewBag.Reviews != null && ((List<ReviewViewModel>)ViewBag.Reviews).Any())
                {
                    @foreach (var review in (List<ReviewViewModel>)ViewBag.Reviews)
                    {
                        <div class="review-item mb-3 pb-3 border-bottom"
                             data-rating="@review.Rating"
                             data-date="@review.CreatedDate.ToString("yyyy-MM-ddTHH:mm:ss")">
                            <div class="d-flex mb-3">
                                <img src="@review.AvatarUrl" class="rounded-circle me-2" alt="User Avatar" style="width:40px;height:40px;">
                                <div>
                                    <h6 class="mb-1">@review.UserName</h6>
                                    <div class="text-warning mb-1">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Rating)
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                    </div>
                                    <small class="text-muted">@review.CreatedDate.ToString("dd/MM/yyyy")</small>
                                </div>
                            </div>

                            <p>@review.CommentText</p>

                            @if (review.MediaUrls != null && review.MediaUrls.Any())
                            {
                                <div class="d-flex gap-2 mb-2">
                                    @foreach (var img in review.MediaUrls)
                                    {
                                        <img src="@img" alt="Review Image" class="rounded" style="width:80px;height:80px;object-fit:cover;">
                                    }
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">Chưa có đánh giá nào cho sản phẩm này.</p>
                }
            </div>
            <div class="text-center mt-3">
                <button id="loadMoreBtn" class="btn btn-outline-crimson btn-sm my-3">Xem thêm</button>
            </div>

        </div>


    </div>
</div>



<script>
    let currentRating = 5; // Mặc định 5 sao

    document.querySelectorAll(".rating i").forEach(star => {
        // Hover: highlight tạm
        star.addEventListener("mouseenter", function () {
            let hoverValue = parseInt(this.getAttribute("data-rating"));
            highlightStars(hoverValue);
        });

        // Rời chuột: quay lại trạng thái đã chọn
        star.addEventListener("mouseleave", function () {
            highlightStars(currentRating);
        });

        // Click: chọn cố định
        star.addEventListener("click", function () {
            currentRating = parseInt(this.getAttribute("data-rating"));
            document.getElementById("ratingInput").value = currentRating;
            highlightStars(currentRating);
        });
    });

    // Hàm đổi màu sao
    function highlightStars(rating) {
        document.querySelectorAll(".rating i").forEach((s, idx) => {
            if (idx < rating) {
                s.classList.add("fas", "text-warning");
                s.classList.remove("far");
            } else {
                s.classList.add("far");
                s.classList.remove("fas", "text-warning");
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Gọi mặc định highlight 5 sao khi load trang
        highlightStars(5);
        document.getElementById("ratingInput").value = 5;

        // Preview ảnh upload
        for (let i = 1; i <= 3; i++) {
            const input = document.getElementById('imageInput' + i);
            const img = document.getElementById('imagePreview' + i);

            if (input) {
                input.addEventListener('change', function () {
                    if (this.files && this.files[0]) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            img.src = e.target.result;
                        };
                        reader.readAsDataURL(this.files[0]);
                    }
                });
            }
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        for (let i = 1; i <= 3; i++) {
            const input = document.getElementById('imageInput' + i);
            const img = document.getElementById('imagePreview' + i);

            if (input) {
                input.addEventListener('change', function () {
                    if (this.files && this.files[0]) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            img.src = e.target.result;
                        };
                        reader.readAsDataURL(this.files[0]);
                    }
                });
            }
        }
    });

    document.querySelectorAll(".rating-filter").forEach(btn => {
        btn.addEventListener("click", function () {
            // Xóa active cũ, thêm active cho nút hiện tại
            document.querySelectorAll(".rating-filter").forEach(b => b.classList.remove("active"));
            this.classList.add("active");

            let rating = this.dataset.rating; // lấy số sao từ button

            // Lọc danh sách review
            document.querySelectorAll(".review-item").forEach(item => {
                if (!rating || item.dataset.rating === rating) {
                    item.style.display = "";
                } else {
                    item.style.display = "none";
                }
            });
        });
    });

    const sortSelect = document.querySelector(".form-select");

    sortSelect.addEventListener("change", function () {
        const sortValue = this.value;
        const reviewsContainer = document.querySelector(".comments-list");
        const reviews = Array.from(reviewsContainer.querySelectorAll(".review-item"));

        reviews.sort((a, b) => {
            const dateA = new Date(a.dataset.date);
            const dateB = new Date(b.dataset.date);

            if (sortValue === "latest") {
                return dateB - dateA; // mới nhất trước
            } else if (sortValue === "oldest") {
                return dateA - dateB; // cũ nhất trước
            }
        });

        // Clear và append lại review theo thứ tự mới
        reviewsContainer.innerHTML = "";
        reviews.forEach(r => reviewsContainer.appendChild(r));
    });

    const reviews = document.querySelectorAll(".review-item");
    const loadMoreBtn = document.getElementById("loadMoreBtn");
    let visibleCount = 5; // ban đầu hiển thị 5

    function showReviews() {
        reviews.forEach((review, index) => {
            if (index < visibleCount) {
                review.style.display = "block";
            } else {
                review.style.display = "none";
            }
        });

        // Ẩn nút nếu không còn review để load
        if (visibleCount >= reviews.length) {
            loadMoreBtn.style.display = "none";
        } else {
            loadMoreBtn.style.display = "inline-block";
        }
    }

    // Lần đầu gọi
    showReviews();

    // Khi bấm Xem thêm
    loadMoreBtn.addEventListener("click", () => {
        visibleCount += 5;
        showReviews();
    });
</script>

<!-- Debug Script 1 - Kiểm tra dữ liệu variant combinations -->
<script>
    // Debug variant combinations data structure
    document.addEventListener('DOMContentLoaded', function () {
        console.log("=== VARIANT COMBINATIONS DEBUG ===");
        console.log("Raw variantCombinations:", variantCombinations);

        if (variantCombinations && variantCombinations.length > 0) {
            console.log("First combination keys:", Object.keys(variantCombinations[0]));

            variantCombinations.forEach((combo, index) => {
                console.log(`Combination ${index}:`, {
                    variantValueIds: combo.variantValueIds,
                    quantity: combo.quantity,
                    Quantity: combo.Quantity, // Kiểm tra cả viết hoa
                    price: combo.price,
                    Price: combo.Price, // Kiểm tra cả viết hoa
                    image: combo.image,
                    Image: combo.Image // Kiểm tra cả viết hoa
                });
            });
        } else {
            console.log("No variant combinations found");
        }
    });
</script>

<!-- Debug Script 2 - Kiểm tra việc chọn variant -->
<script>
    // Debug script - thêm vào trước các script khác
    document.addEventListener('DOMContentLoaded', function () {
        console.log("=== DEBUGGING VARIANT SELECTION ===");

        // Kiểm tra các elements
        const variantInputs = document.querySelectorAll('[name^="variant_"]');
        console.log("Found variant inputs:", variantInputs.length);

        variantInputs.forEach((input, index) => {
            console.log(`Input ${index}:`, {
                name: input.name,
                value: input.value,
                type: input.type,
                checked: input.checked
            });
        });

        // Kiểm tra form submit
        const form = document.getElementById("addToCartForm");
        if (form) {
            console.log("Form found:", form);

            form.addEventListener("submit", function (e) {
                console.log("=== FORM SUBMIT TRIGGERED ===");

                // Kiểm tra các input đã check
                const checkedInputs = document.querySelectorAll('[name^="variant_"]:checked');
                console.log("Checked variant inputs:", checkedInputs.length);

                checkedInputs.forEach((input, index) => {
                    console.log(`Checked input ${index}:`, {
                        name: input.name,
                        value: input.value,
                        checked: input.checked
                    });
                });

                // Kiểm tra unique groups
                const allVariantInputs = document.querySelectorAll('[name^="variant_"]');
                const uniqueGroups = [...new Set(Array.from(allVariantInputs).map(v => v.name))];
                console.log("Unique groups:", uniqueGroups);

                // Kiểm tra từng group
                uniqueGroups.forEach(groupName => {
                    const checked = document.querySelector(`input[name="${groupName}"]:checked`);
                    console.log(`Group ${groupName}:`, checked ? "HAS SELECTION" : "NO SELECTION");
                    if (checked) {
                        console.log("Selected value:", checked.value);
                    }
                });
            });
        }

        // Thêm event listener cho các button variant
        const variantButtons = document.querySelectorAll('.btn-check');
        console.log("Found variant buttons:", variantButtons.length);

        variantButtons.forEach((button, index) => {
            console.log(`Button ${index}:`, {
                name: button.name,
                value: button.value,
                id: button.id
            });

            button.addEventListener('change', function () {
                console.log(`Button ${index} changed:`, {
                    name: this.name,
                    value: this.value,
                    checked: this.checked
                });
            });
        });
    });
</script>

<!-- Main Variant Script -->
<script>
    const variantCombinations = @Html.Raw(Json.Serialize(variantCombinations));
    console.log("Variant Combinations:", variantCombinations);

    let currentVariantPrice = parseFloat("@((priceInfo != null && !priceInfo.IsVariant && priceInfo.Price.HasValue) ? priceInfo.Price.Value.ToString("0.##") : "0")");

    // -------------------------
    // FIX: Tách trường hợp có biến thể / không có biến thể
    // -------------------------
    let totalQuantity = 0;
    if (@(priceInfo != null && priceInfo.IsVariant ? "true" : "false")) {
        // Có biến thể -> cộng tất cả quantity của variant combinations
        totalQuantity = variantCombinations.reduce((sum, v) => sum + (v.quantity || v.Quantity || 0), 0);
    } else {
        // Không có biến thể -> lấy quantity trực tiếp từ Model
        totalQuantity = parseInt("@Model.Quantity") || 0;
    }

    let availableStock = totalQuantity;

    // FIX: Hiển thị thông báo phù hợp cho sản phẩm có variant
    const quantityDisplay = document.getElementById("productQuantityDisplay");
    if (quantityDisplay) {
        if (@(priceInfo != null && priceInfo.IsVariant ? "true" : "false")) {
            quantityDisplay.textContent = `Còn lại: ${totalQuantity} sản phẩm (chọn biến thể để xem chi tiết)`;
        } else {
            quantityDisplay.textContent = `Còn lại: ${totalQuantity} sản phẩm`;
        }
    }

    const selectedVariantsMap = new Map();

    // FIX: Đếm tổng số variant groups
    const totalVariantGroups = @(variants?.Count ?? 0);
    console.log("Total variant groups:", totalVariantGroups);

    function updateTotalPrice() {
        const quantity = parseInt(document.getElementById("productQuantityInput").value) || 1;
        const total = quantity * currentVariantPrice;
        document.getElementById("productPriceDisplay").textContent = total.toLocaleString("vi-VN") + " đ";
    }

    // FIX: Xử lý chọn biến thể - hỗ trợ cả 1 và nhiều biến thể
    document.querySelectorAll('.btn-check').forEach(input => {
        input.addEventListener('change', () => {
            selectedVariantsMap.set(input.name, parseInt(input.value));

            const selectedArray = Array.from(selectedVariantsMap.values()).sort((a, b) => a - b);
            console.log("Selected variants:", selectedArray);
            console.log("Total variant groups:", totalVariantGroups);
            console.log("All variant combinations:", variantCombinations);

            // FIX: Kiểm tra match dựa trên số lượng variant đã chọn
            let match = null;

            if (totalVariantGroups === 1) {
                // Chỉ có 1 variant group -> tìm combination có chứa giá trị đã chọn
                const selectedValue = selectedArray[0];
                match = variantCombinations.find(variant => {
                    console.log("Checking variant:", variant.variantValueIds, "against selected:", selectedValue);
                    return variant.variantValueIds.length === 1 && variant.variantValueIds[0] === selectedValue;
                });
            } else {
                // Có nhiều variant groups -> cần chọn đủ tất cả
                if (selectedArray.length === totalVariantGroups) {
                    match = variantCombinations.find(variant => {
                        const sortedIds = [...variant.variantValueIds].sort((a, b) => a - b);
                        return JSON.stringify(sortedIds) === JSON.stringify(selectedArray);
                    });
                }
            }

            console.log("Found match:", match);

            // Nếu tìm thấy match, cập nhật giá và số lượng
            if (match) {
                // FIX: Xử lý cả viết thường và viết hoa
                currentVariantPrice = match.price || match.Price || 0;
                updateTotalPrice();

                if (quantityDisplay) {
                    const matchQuantity = match.quantity || match.Quantity || 0;
                    quantityDisplay.textContent = `Còn lại: ${matchQuantity} sản phẩm`;
                }

                const mainImage = document.getElementById('mainProductImage');
                const matchImage = match.image || match.Image;
                if (mainImage && matchImage) {
                    mainImage.src = matchImage;
                }
            } else {
                // Nếu không có kết hợp đầy đủ hoặc chưa chọn đủ
                if (totalVariantGroups === 1 || selectedArray.length < totalVariantGroups) {
                    // Giữ nguyên hiển thị ban đầu cho đến khi chọn đủ
                    const defaultPrice = @((priceInfo != null && priceInfo.MinPrice.HasValue) ? priceInfo.MinPrice.Value.ToString("0.##") : "0");
                    currentVariantPrice = parseFloat(defaultPrice);
                    updateTotalPrice();
                } else {
                    // Không tìm thấy combination phù hợp
                    currentVariantPrice = 0;
                    updateTotalPrice();

                    if (quantityDisplay) {
                        quantityDisplay.textContent = `Còn lại: ${totalQuantity} sản phẩm`;
                    }
                }
            }

            updateFormHiddenInputs();
        });
    });

    const quantityInput = document.getElementById("productQuantityInput");
    const hiddenQuantity = document.getElementById("QuantityHidden");

    document.getElementById("btnIncreaseProductQuantity").addEventListener("click", () => {
        quantityInput.value = parseInt(quantityInput.value) + 1;
        hiddenQuantity.value = quantityInput.value;
        updateTotalPrice();
        updateFormHiddenInputs();
    });

    document.getElementById("btnDecreaseProductQuantity").addEventListener("click", () => {
        quantityInput.value = Math.max(1, parseInt(quantityInput.value) - 1);
        hiddenQuantity.value = quantityInput.value;
        updateTotalPrice();
        updateFormHiddenInputs();
    });

    quantityInput.addEventListener("input", () => {
        hiddenQuantity.value = quantityInput.value;
        updateTotalPrice();
        updateFormHiddenInputs();
    });

    function updateFormHiddenInputs() {
        const container = document.getElementById("variantInputsContainer");
        if (!container) return;

        container.innerHTML = "";

        const checkedRadios = document.querySelectorAll("input[type=radio]:checked");

        if (checkedRadios.length === 0) {
            const emptyInput = document.createElement("input");
            emptyInput.type = "hidden";
            emptyInput.name = "VariantValueIds";
            emptyInput.value = "";
            container.appendChild(emptyInput);
        } else {
            checkedRadios.forEach(radio => {
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = "VariantValueIds";
                input.value = radio.value;
                container.appendChild(input);
            });
        }

        hiddenQuantity.value = quantityInput.value || "1";
    }

    function setMainImage(src) {
        const mainImage = document.getElementById('mainProductImage');
        if (mainImage) {
            mainImage.src = src;
        }
    }

    function highlightThumbnailBySrc(src) {
        document.querySelectorAll('.product-thumbnail').forEach(img => {
            img.classList.toggle('active', img.src === src);
        });
    }

    document.querySelectorAll('.product-thumbnail').forEach(thumbnail => {
        thumbnail.addEventListener('click', () => {
            setMainImage(thumbnail.src);
            highlightThumbnailBySrc(thumbnail.src);

            const variantIdsStr = thumbnail.getAttribute('data-variant-value-ids');
            if (variantIdsStr) {
                const variantIds = variantIdsStr.split(',').map(id => parseInt(id.trim()));
                variantIds.forEach(id => {
                    const input = document.querySelector(`input[type=radio][value="${id}"]`);
                    if (input && !input.checked) {
                        input.checked = true;
                        input.dispatchEvent(new Event('change'));
                    }
                });
            }
        });
    });

    // FIX: Cập nhật logic cho cả 1 và nhiều biến thể
    document.querySelectorAll('.btn-check').forEach(input => {
        input.addEventListener('change', () => {
            if (!input.checked) return;

            const selectedValues = Array.from(document.querySelectorAll('.btn-check:checked')).map(i => parseInt(i.value));

            let match = null;
            if (totalVariantGroups === 1) {
                // Chỉ có 1 variant group - tìm combination có đúng 1 giá trị khớp
                const selectedValue = selectedValues[0];
                match = variantCombinations.find(v => {
                    return v.variantValueIds.length === 1 && v.variantValueIds[0] === selectedValue;
                });
            } else {
                // Có nhiều variant groups
                match = variantCombinations.find(v => {
                    return v.variantValueIds.every(id => selectedValues.includes(id)) &&
                        selectedValues.every(id => v.variantValueIds.includes(id));
                });
            }

            if (match && (match.image || match.Image)) {
                const matchImage = match.image || match.Image;
                setMainImage(matchImage);
                highlightThumbnailBySrc(matchImage);
            }
        });
    });

    updateFormHiddenInputs();
</script>

<!-- Cart Validation Script - FIXED -->
<script>
document.getElementById("addToCartForm").addEventListener("submit", async function (e) {
  e.preventDefault();

        // Đảm bảo các input ẩn variant đã được cập nhật
        updateFormHiddenInputs();

  let errors = [];

        // -------------------------
        // FIX: Kiểm tra biến thể bắt buộc TRƯỚC khi kiểm tra tồn kho
        // -------------------------
        const isVariantProduct = @(priceInfo != null && priceInfo.IsVariant ? "true" : "false");
        console.log("Is variant product:", isVariantProduct);

        let selectedVariantCombination = null;

        if (isVariantProduct) {
            // Kiểm tra tất cả các input variant
            const allVariantInputs = document.querySelectorAll('[name^="variant_"]');
            const uniqueGroups = [...new Set(Array.from(allVariantInputs).map(v => v.name))];

            // Kiểm tra xem đã chọn đủ biến thể chưa
            for (const groupName of uniqueGroups) {
                const checked = document.querySelector(`input[name="${groupName}"]:checked`);
                if (!checked) {
                    errors.push(`Vui lòng chọn ${groupName.replace("variant_", "")}.`);
                }
            }

            // Nếu đã chọn đủ biến thể, tìm combination tương ứng
            if (errors.length === 0) {
                const selectedValues = Array.from(document.querySelectorAll('.btn-check:checked')).map(i => parseInt(i.value));

                if (uniqueGroups.length === 1) {
                    // 1 variant group
                    selectedVariantCombination = variantCombinations.find(v => {
                        return v.variantValueIds.length === 1 && v.variantValueIds[0] === selectedValues[0];
                    });
                } else {
                    // Nhiều variant groups
                    selectedVariantCombination = variantCombinations.find(v => {
                        return v.variantValueIds.every(id => selectedValues.includes(id)) &&
                            selectedValues.every(id => v.variantValueIds.includes(id));
                    });
                }

                if (!selectedVariantCombination) {
                    errors.push("Combination không tồn tại cho các biến thể đã chọn.");
                }
            }
        }

        // Nếu có lỗi về variant, dừng ngay
        if (errors.length > 0) {
            showToast(errors.join("\n"), false);
            return;
        }

        // -------------------------
        // FIX: Lấy availableQuantity CHÍNH XÁC theo logic hiển thị
        // -------------------------
        let availableQuantity = 0;

        if (isVariantProduct) {
            if (selectedVariantCombination) {
                // Đã chọn variant cụ thể -> lấy quantity từ combination đó
                availableQuantity = selectedVariantCombination.quantity || selectedVariantCombination.Quantity || 0;
                console.log("Available quantity from selected combination:", availableQuantity);
            } else {
                // Chưa chọn đủ variant -> lấy tổng quantity (như hiển thị ban đầu)
                availableQuantity = totalQuantity; // Sử dụng biến totalQuantity đã tính ở trên
                console.log("Available quantity from total (no specific variant selected):", availableQuantity);
            }
        } else {
            // Không có biến thể -> lấy từ Model
            availableQuantity = parseInt("@Model.Quantity") || 0;
            console.log("Available quantity from model (no variants):", availableQuantity);
        }

        // -------------------------
        // ALTERNATIVE: Lấy trực tiếp từ text hiển thị (đảm bảo 100% khớp)
        // -------------------------
        const quantityDisplayEl = document.getElementById("productQuantityDisplay");
        if (quantityDisplayEl) {
            const displayText = quantityDisplayEl.textContent || "";
            console.log("Current display text:", displayText);

            // Extract số từ text hiển thị: "Còn lại: 100 sản phẩm" -> 100
            const quantityMatch = displayText.match(/Còn lại:\s*(\d+)/);
            if (quantityMatch) {
                const displayedQuantity = parseInt(quantityMatch[1]);
                console.log("Quantity from display:", displayedQuantity);

                // SỬ DỤNG SỐ LƯỢNG TỪ HIỂN THỊ (chính xác 100%)
                availableQuantity = displayedQuantity;
                console.log("Using displayed quantity as final available:", availableQuantity);
            }
        }

  // Lấy số lượng người dùng nhập
  const quantityInputEl = document.getElementById("productQuantityInput");
  const requestedQuantity = parseInt(quantityInputEl?.value) || 1;

        console.log("=== QUANTITY VALIDATION ===");
        console.log("Requested quantity:", requestedQuantity);
        console.log("Available quantity:", availableQuantity);

        // Kiểm tra hết hàng
        if (availableQuantity === 0) {
            errors.push("Sản phẩm này hiện đã hết hàng.");
        }
        // Kiểm tra vượt tồn kho
        else if (requestedQuantity > availableQuantity) {
            errors.push(`Số lượng bạn chọn (${requestedQuantity}) vượt quá số lượng tồn (${availableQuantity}).`);
        }

        if (errors.length > 0) {
            showToast(errors.join("\n"), false);
            return;
        }

        // -------------------------
        // Submit form
        // -------------------------
        const form = this;
        const formData = new FormData(form);

        console.log("=== SUBMITTING FORM ===");
        for (let [key, value] of formData.entries()) {
            console.log(key + ': ' + value);
        }

        try {
            const response = await fetch(form.action, {
                method: (form.method || "POST").toUpperCase(),
                body: formData,
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                credentials: 'same-origin'
            });

    const contentType = response.headers.get('content-type') || '';
    // Lấy qty người dùng chọn để cộng badge khi thành công
    const qty = parseInt(document.getElementById("productQuantityInput")?.value || '1') || 1;

    if (contentType.includes('application/json')) {
      const data = await response.json();

                if (response.ok && (data.success === undefined || data.success === true)) {
                    showToast(data.message || 'Đã thêm vào giỏ hàng thành công!', true);
                    return;
                }

                const errMsg = data.message || '';
                const errCode = data.errorCode || '';

                if (errCode === 'EXCEEDED_STOCK' || /vượt|tồn|exceed/i.test(errMsg)) {
                    showToast('Số lượng bạn chọn vượt quá số lượng hiện có.', false);
                } else {
                    showToast(errMsg || 'Có lỗi xảy ra khi thêm vào giỏ hàng.', false);
                }
                return;
            } else {
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }

                const text = await response.text();
                if (/vượt|tồn|exceed/i.test(text)) {
                    showToast('Số lượng bạn chọn vượt quá số lượng hiện có.', false);
                } else if (response.ok) {
                    showToast('Đã thêm vào giỏ hàng thành công!', true);
                    // Optional: refresh page or update cart count
                    // window.location.reload();
                } else {
                    showToast('Có lỗi xảy ra. Vui lòng thử lại.', false);
                }
                return;
            }
        } catch (err) {
            console.error("Submit error:", err);
            showToast('Lỗi kết nối. Vui lòng thử lại sau.', false);
        }
    });

    // Toast notification function (nếu chưa có)
    function showToast(message, isSuccess = true) {
        // Tạo toast element nếu chưa có
        let toast = document.getElementById('toast-notification');
        if (!toast) {
            toast = document.createElement('div');
            toast.id = 'toast-notification';
            toast.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 15px 20px;
                    border-radius: 5px;
                    color: white;
                    font-weight: 500;
                    z-index: 10000;
                    max-width: 300px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    transition: all 0.3s ease;
                    transform: translateX(100%);
                `;
            document.body.appendChild(toast);
        }

        // Set style và message
        toast.style.backgroundColor = isSuccess ? '#28a745' : '#dc3545';
        toast.textContent = message;
        toast.style.transform = 'translateX(0)';

        // Auto hide sau 3 giây
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
</script>

