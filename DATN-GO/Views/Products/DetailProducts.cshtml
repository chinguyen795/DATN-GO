@using DATN_GO.ViewModels
@{
    var images = ViewBag.Images as List<string> ?? new List<string>();
    var variants = ViewBag.VariantOptions as List<VariantWithValuesViewModel>;
    var variantCombinations = ViewBag.VariantCombinations as List<DATN_GO.ViewModels.VariantCombinationViewModel> ?? new
    List<DATN_GO.ViewModels.VariantCombinationViewModel>();
    var priceInfo = ViewBag.MinMaxPrice as DATN_GO.ViewModels.MinMaxPriceResponse;
}

<div class="row mb-5">
    <!-- Product Image Section -->
    <div class="col-md-6 mb-4">
        <!-- Main Carousel -->

        @if (images.Count > 0)
        {
            <!-- Carousel Main -->
            <div id="productCarousel" class="carousel slide mb-3" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @for (int i = 0; i < images.Count; i++)
                    {
                        <div id="mainImage" class="carousel-item active">
                            <img id="mainProductImage" src="@images.FirstOrDefault()" class="d-block w-100 border rounded"
                                alt="Hình ảnh sản phẩm">
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>

            <!-- Thumbnails with Navigation -->
            <div class="position-relative">
                <button class="thumbnail-nav prev" type="button" id="scrollPrev">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="thumbnails-container">
                    <div class="thumbnails-wrapper">
                        @for (int i = 0; i < images.Count; i++)
                        {
                            <img src="@images[i]" class="product-thumbnail @(i == 0 ? "active" : "")"
                                data-bs-target="#productCarousel" data-bs-slide-to="@i" />
                        }
                    </div>
                </div>
                <button class="thumbnail-nav next" type="button" id="scrollNext">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        }
        else
        {
            <p>Không có hình ảnh sản phẩm.</p>
        }
    </div>
    <!-- Product Information Section -->
    <div class="col-md-6">
        <!-- Store Information -->
        <div class="pb-2 mb-2 border-bottom">
            <div class="d-flex align-items-center">
                <img src="@ViewBag.StoreLogo" alt="Logo cửa hàng" class="rounded-circle me-2 logo-store"
                    style="width: 48px; height: 48px; object-fit: cover;">
                <div class="flex-grow-1">
                    <h5 class="mb-0">@ViewBag.StoreName</h5>
                    <div class="d-flex align-items-center mt-1">
                        <div class="text-muted me-3">
                            <!--<small>
                                    <i class="fas fa-star text-warning"></i>
                                    @($"{ViewBag.Rating} ({ViewBag.Reviews} đánh giá)")
                                </small>-->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Product Information -->
        <h2 class="mb-3">@ViewBag.ProductName</h2>
        <div class="mb-3 d-flex align-items-center">
            <span class="text-danger fw-bold fs-3"
                style="white-space: nowrap; font-family: Arial, sans-serif; font-size: 16px; font-weight: 600;">
                <span id="productPriceDisplay" class="text-crimson fw-bold fs-3">
                    @if (priceInfo != null)
                    {
                        if (priceInfo.IsVariant)
                        {
                            if (priceInfo.MinPrice == priceInfo.MaxPrice)
                            {
                                @($"{(priceInfo.MinPrice):N0} đ")
                            }
                            else
                            {
                                @($"{(priceInfo.MinPrice):N0} đ - {(priceInfo.MaxPrice):N0} đ")
                            }
                        }
                        else
                        {
                            @($"{(priceInfo.Price):N0} đ")
                        }
                    }
                    else
                    {
                        <span class="text-muted">Không có giá</span>
                    }
                </span>
            </span>
        </div>

        <!-- Rating -->
        <div class="mb-4">
            <div class="d-flex align-items-center">
                <div class="text-warning me-2">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-alt"></i>
                </div>
                <span>4.5 (245 đánh giá)</span>
            </div>
        </div>

        <!-- Product Variants -->
        <!-- Product Variants -->
        <div class="mb-4">
            @if (variants != null)
            {
                @for (int i = 0; i < variants.Count; i++)
                {
                    var variant = variants[i];
                    <div class="mb-3">
                        <h5>@variant.VariantName</h5>
                        <div class="d-flex gap-2 flex-wrap">
                            @foreach (var value in variant.Values)
                            {
                                var inputId = $"variant_{variant.VariantName}_{value.Id}";
                                <input type="radio"
                                       class="btn-check"
                                       name="variant_@variant.VariantName"
                                       id="@inputId"
                                       value="@value.Id"
                                       autocomplete="off" />
                                <label class="btn btn-outline-danger" for="@inputId">
                                    @value.ValueName
                                </label>
                            }
                        </div>
                    </div>
                }
            }
        </div>


        <!-- Quantity Selector -->
        <div class="mb-4">
            <h5>Số lượng</h5>
            <div class="d-flex align-items-center gap-3">
                <div class="input-group quantity-input-group">
                    <button class="btn btn-outline-secondary" type="button" id="btnDecreaseProductQuantity">-</button>
                    <input class="form-control text-center" value="1" min="1" id="productQuantityInput" step="1">
                    <button class="btn btn-outline-secondary" type="button" id="btnIncreaseProductQuantity">+</button>
                </div>
                <span class="text-muted" id="productQuantityDisplay">Còn lại: @Model.Quantity sản phẩm</span>
            </div>
        </div>


        <form asp-controller="Cart" asp-action="AddToCart" method="post">
            @Html.AntiForgeryToken()

            <!-- Hidden product ID -->
            <input type="hidden" name="ProductId" value="@Model.Id" />
            <div id="variantInputsContainer"></div>
            <!-- Hidden Quantity -->
            <input type="hidden" name="Quantity" id="QuantityHidden" value="1" />

            <div class="d-grid gap-2 mt-3">
                <button type="submit" class="btn btn-outline-primary btn-lg">Thêm vào giỏ hàng</button>
            </div>
        </form>


    </div>
</div>

<div class="d-flex align-items-center container mb-3">
    <hr class="flex-grow-1 border-danger border-1 opacity-100">
</div>

<div class="mb-4">
    <h3>Thông tin chi tiết:</h3>

    <ul class="list-unstyled text-muted mb-3">
        <li><strong>Nơi xuất xứ:</strong> @Model.PlaceOfOrigin</li>
        <li><strong>Thương hiệu:</strong> @Model.Brand</li>
        <li><strong>Mô tả:</strong> @Model.Description</li>
    </ul>
</div>
<script>
    const variantCombinations = @Html.Raw(Json.Serialize(variantCombinations));
    console.log("Variant Combinations:", variantCombinations);

    let currentVariantPrice = parseFloat("@((priceInfo != null && !priceInfo.IsVariant && priceInfo.Price.HasValue) ? priceInfo.Price.Value.ToString("0.##") : "0")");
    let totalQuantity = variantCombinations.reduce((sum, v) => sum + v.quantity, 0);

    const quantityDisplay = document.getElementById("productQuantityDisplay");
    if (quantityDisplay) {
        quantityDisplay.textContent = `Còn lại: ${totalQuantity} sản phẩm`;
    }

    const selectedVariantsMap = new Map();

    function updateTotalPrice() {
        const quantity = parseInt(document.getElementById("productQuantityInput").value) || 1;
        const total = quantity * currentVariantPrice;
        document.getElementById("productPriceDisplay").textContent = total.toLocaleString("vi-VN") + " đ";
    }

    // Xử lý chọn biến thể
    document.querySelectorAll('.btn-check').forEach(input => {
        input.addEventListener('change', () => {
            selectedVariantsMap.set(input.name, parseInt(input.value));

            const selectedArray = Array.from(selectedVariantsMap.values()).sort((a, b) => a - b);

            const match = variantCombinations.find(variant => {
                const sortedIds = [...variant.variantValueIds].sort((a, b) => a - b);
                return JSON.stringify(sortedIds) === JSON.stringify(selectedArray);
            });

            if (match) {
                currentVariantPrice = match.price;
                updateTotalPrice();

                if (quantityDisplay) {
                    quantityDisplay.textContent = `Còn lại: ${match.quantity} sản phẩm`;
                }

                const mainImage = document.getElementById('mainProductImage');
                if (mainImage && match.image) {
                    mainImage.src = match.image;
                }
            } else {
                currentVariantPrice = 0;
                updateTotalPrice();

                if (quantityDisplay) {
                    quantityDisplay.textContent = `Còn lại: ${totalQuantity} sản phẩm`;
                }
            }

            updateFormHiddenInputs();
        });
    });

    const quantityInput = document.getElementById("productQuantityInput");
    const hiddenQuantity = document.getElementById("QuantityHidden");

    document.getElementById("btnIncreaseProductQuantity").addEventListener("click", () => {
        quantityInput.value = parseInt(quantityInput.value) + 1;
        hiddenQuantity.value = quantityInput.value;
        updateTotalPrice();
        updateFormHiddenInputs();
    });

    document.getElementById("btnDecreaseProductQuantity").addEventListener("click", () => {
        quantityInput.value = Math.max(1, parseInt(quantityInput.value) - 1);
        hiddenQuantity.value = quantityInput.value;
        updateTotalPrice();
        updateFormHiddenInputs();
    });

    quantityInput.addEventListener("input", () => {
        hiddenQuantity.value = quantityInput.value;
        updateTotalPrice();
        updateFormHiddenInputs();
    });

    function updateFormHiddenInputs() {
        const container = document.getElementById("variantInputsContainer");
        if (!container) return;

        container.innerHTML = "";

        const checkedRadios = document.querySelectorAll("input[type=radio]:checked");

        if (checkedRadios.length === 0) {
            const emptyInput = document.createElement("input");
            emptyInput.type = "hidden";
            emptyInput.name = "VariantValueIds";
            emptyInput.value = "";
            container.appendChild(emptyInput);
        } else {
            checkedRadios.forEach(radio => {
                const input = document.createElement("input");
                input.type = "hidden";
                input.name = "VariantValueIds";
                input.value = radio.value;
                container.appendChild(input);
            });
        }

        hiddenQuantity.value = quantityInput.value || "1";
    }

    updateFormHiddenInputs();
</script>
