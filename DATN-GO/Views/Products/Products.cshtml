﻿@using DATN_GO.Models
@using DATN_GO.ViewModels
@{
    ViewData["Title"] = "Food Page";
    var products = ViewBag.ProductList as List<Products>;
    var imagesDict = ViewBag.ImagesDict as Dictionary<int, List<string>>;
    var priceDict = ViewBag.MinMaxPriceDict as Dictionary<int, MinMaxPriceResponse>;
    var storeDict = ViewBag.StoreDict as Dictionary<int, Stores>;
    var categories = ViewBag.Categories as List<Categories>;
    var provinces = ViewBag.Provinces as List<string>;
    var ratingDict = ViewBag.RatingDict as Dictionary<int, (double Avg, int Count)>;
}
<style>
    .card-title {
        display: -webkit-box;
        -webkit-line-clamp: 2; /* Giới hạn 2 dòng */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .text-truncate {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

</style>

<!-- Filter bar -->
<div class="bg-crimson rounded-3 mt-3 mb-3 py-3">
    <div class="d-flex flex-row align-items-center justify-content-between flex-wrap mx-2">
        <div class="text-white fw-bold me-2 my-auto">
            <button class="btn btn-outline-light d-lg-none me-2" type="button" data-bs-toggle="offcanvas"
                    data-bs-target="#filterOffcanvas">
                <i class="bi bi-funnel"></i> Bộ lọc
            </button>
            <span>Sắp xếp theo:</span>
        </div>
        <div class="d-flex flex-row gap-2 flex-wrap">
            <button class="btn text-white fw-bold border border-white filter-btn-hover" data-sort="newest">
                <i class="bi bi-clock-history me-1"></i> Mới nhất
            </button>
            <button class="btn text-white fw-bold border border-white filter-btn-hover" data-sort="popular">
                <i class="bi bi-graph-up me-1"></i> Phổ biến
            </button>
            <button class="btn text-white fw-bold border border-white filter-btn-hover" data-sort="best-seller">
                <i class="bi bi-bag-check me-1"></i> Bán chạy
            </button>
            <select id="sortPriceSelect" class="form-select bg-crimson text-white fw-bold border-0 border-bottom" style="width:auto; min-width:120px;">
                <option value="">Giá</option>
                <option value="price-asc">Giá tăng dần</option>
                <option value="price-desc">Giá giảm dần</option>
            </select>
        </div>
    </div>
</div>

<!-- content -->
<div class="row">
    <!-- Desktop Filter -->
    <div class="col-lg-3 d-none d-lg-block">
        <div class="filter-section">
            <h5 class="mb-3">Lọc sản phẩm</h5>
            <!-- Search -->
            <div class="mb-3">
                <label for="searchInput" class="form-label">
                    <i class="bi bi-search"></i> Tìm kiếm
                </label>
                <input type="text" id="searchInput" class="form-control" placeholder="Nhập từ khóa" />
            </div>

            <!-- Price Range -->
            <div class="mb-3">
                <label class="form-label">Khoảng giá</label>
                <div class="row g-2">
                    <div class="col-6">
                        <input type="number" class="form-control" id="minPrice" placeholder="Tối thiểu" min="0" />
                    </div>
                    <div class="col-6">
                        <input type="number" class="form-control" id="maxPrice" placeholder="Tối đa" min="0" />
                    </div>
                </div>
            </div>

            <!-- Category Filter -->
            <div class="mb-3">
                <label for="categorySelect" class="form-label">
                    <i class="bi bi-grid"></i> Danh mục
                </label>
                <select id="categorySelect" class="selectpicker w-100" data-live-search="true"
                        title="Chọn danh mục" data-width="auto">
                    <option value="">Tất cả danh mục</option>
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.Id" data-tokens="@cat.Name">@cat.Name</option>
                    }
                </select>
            </div>


            <!-- Province Filter -->
            <div class="mb-3">
                <label for="provinceSelect" class="form-label">
                    <i class="bi bi-geo-alt"></i> Tỉnh/Thành phố
                </label>
                <select id="provinceSelect" class="selectpicker w-100" data-live-search="true" data-width="auto">
                    <option value="">Tất cả địa điểm</option>
                    <option value="can-tho">Cần Thơ</option>
                    <option value="hcm">TP. Hồ Chí Minh</option>
                    <option value="ha-noi">Hà Nội</option>
                    <option value="da-nang">Đà Nẵng</option>
                    <option value="other">Tỉnh/TP khác</option>
                </select>
            </div>

            <!-- Star Rating Filter -->
            <div class="mb-3">
                <label class="form-label">Đánh giá</label>
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-crimson filter-rating-btn" data-rating="5">5 <i class="bi bi-star-fill"></i></button>
                    <button type="button" class="btn btn-outline-crimson filter-rating-btn" data-rating="3-4">3 đến 4 <i class="bi bi-star-fill"></i></button>
                    <button type="button" class="btn btn-outline-crimson filter-rating-btn" data-rating="1-2">1 đến 2 <i class="bi bi-star-fill"></i></button>
                </div>
            </div>

            <button id="applyFiltersBtn" class="btn btn-crimson w-100 mb-2">
                <i class="bi bi-search"></i> Tìm kiếm
            </button>
        </div>
    </div>

    <!-- Mobile Filter Offcanvas -->
    <div class="offcanvas offcanvas-start" tabindex="-1" id="filterOffcanvas">
        <div class="offcanvas-header text-crimson bg-light mx-0">
            <h5 class="offcanvas-title fw-bold">Bộ lọc</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="filter-section">
                <!-- Search -->
                <div class="mb-3">
                    <label for="searchInputMobile" class="form-label">
                        <i class="bi bi-search"></i> Tìm kiếm
                    </label>
                    <input type="text" id="searchInputMobile" class="form-control" placeholder="Nhập từ khóa" />
                </div>

                <!-- Price Range -->
                <div class="mb-3">
                    <label class="form-label">Khoảng giá</label>
                    <div class="row g-2">
                        <div class="col-6">
                            <input type="number" class="form-control" id="minPriceMobile" placeholder="Tối thiểu" min="0" />
                        </div>
                        <div class="col-6">
                            <input type="number" class="form-control" id="maxPriceMobile" placeholder="Tối đa" min="0" />
                        </div>
                    </div>
                </div>

                <!-- Category Filter -->
                <div class="mb-3">
                    <label for="categorySelectMobile" class="form-label">
                        <i class="bi bi-grid"></i> Danh mục
                    </label>
                    <select id="categorySelectMobile" class="form-select">
                        <option value="">Tất cả danh mục</option>
                        <option value="mon-nuoc">Món nước</option>
                        <option value="mon-kho">Món khô</option>
                        <option value="do-an-vat">Đồ ăn vặt</option>
                        <option value="do-uong">Đồ uống</option>
                        <option value="trang-mieng">Tráng miệng</option>
                    </select>
                </div>

                <!-- Province Filter -->
                <div class="mb-3">
                    <label for="provinceSelectMobile" class="form-label">
                        <i class="bi bi-geo-alt"></i> Tỉnh/Thành phố
                    </label>
                    <select id="provinceSelectMobile" class="form-select">
                        <option value="">Tất cả địa điểm</option>
                        <option value="can-tho">Cần Thơ</option>
                        <option value="hcm">TP. Hồ Chí Minh</option>
                        <option value="ha-noi">Hà Nội</option>
                        <option value="da-nang">Đà Nẵng</option>
                        <option value="other">Tỉnh/TP khác</option>
                    </select>
                </div>

                <!-- Star Rating Filter -->
                <div class="mb-3">
                    <label class="form-label">Đánh giá</label>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-outline-crimson filter-rating-btn-mobile" data-rating="5">5 <i class="bi bi-star-fill"></i></button>
                        <button type="button" class="btn btn-outline-crimson filter-rating-btn-mobile" data-rating="3-4">3 đến 4 <i class="bi bi-star-fill"></i></button>
                        <button type="button" class="btn btn-outline-crimson filter-rating-btn-mobile" data-rating="1-2">1 đến 2 <i class="bi bi-star-fill"></i></button>
                    </div>
                </div>

                <button id="applyFiltersBtnMobile" class="btn btn-crimson w-100 " data-bs-dismiss="offcanvas">
                    <i class="bi bi-search"></i> Áp dụng bộ lọc
                </button>
            </div>
        </div>
    </div>

    <!-- Product List -->
    <div class="col-lg-9">
        <div class="row" id="productList">
            @{
                int index = 0; // biến đếm
            }
            @foreach (var item in products)
            {
                var category = categories.FirstOrDefault(c => c.Id == item.CategoryId);
                var images = imagesDict.ContainsKey(item.Id) ? imagesDict[item.Id] : new List<string>();
                var priceInfo = priceDict.ContainsKey(item.Id) ? priceDict[item.Id] : null;
                var store = storeDict.ContainsKey(item.Id) ? storeDict[item.Id] : null;
                var hasVariant = (priceInfo?.IsVariant ?? false);

                decimal? salePrice = null;
                if (priceInfo != null)
                {
                    
                        salePrice = priceInfo.Price ?? 0;
                    
                }

                float ratingVal = 0;
                if (ratingDict != null && ratingDict.ContainsKey(item.Id))
                {
                    ratingVal = (float)ratingDict[item.Id].Avg;
                }

                var hiddenClass = index >= 12 ? "d-none" : ""; // ẩn nếu vượt quá 12 sp đầu

                <div class="col-lg-3 col-md-4 col-sm-6 mb-2 @hiddenClass"
                     data-aos="fade-up"
                     data-category="@item.CategoryId"
                     data-province="@store?.Address"
                     data-rating="@store?.Rating"
                     data-price="@salePrice">
                    <a href="/Products/DetailProducts/@item.Id" class="text-decoration-none text-dark d-block h-100">
                        <div class="product-card card h-100 border rounded shadow hover-scale">
                            <div class="position-relative">
                                <img src="@(images.FirstOrDefault() ?? "/image/default.png")"
                                     class="card-img-top"
                                     style="height: 200px; object-fit: cover;"
                                     alt="@item.Name"
                                     data-bs-toggle="tooltip"
                                     title="@item.Name" />
                            </div>
                            <div class="card-body">
                                <!-- Badge (tooltip category) -->
                                <div class="mb-2">
                                    <span class="badge bg-light text-crimson"
                                          data-bs-toggle="tooltip"
                                          title="@category?.Name">@category?.Name</span>
                                </div>

                                <!-- Rating (tooltip số sao/ghi chú) -->
                                <div class="rating text-warning mb-2"
                                     data-bs-toggle="tooltip"
                                     title="@(ratingVal <= 0 ? "Chưa có đánh giá" : $"Đánh giá: {ratingVal:0.0} sao")">
                                    @if (ratingVal <= 0)
                                    {
                                        <span class="text-muted small fst-italic">Chưa có đánh giá</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star-fill" aria-hidden="true"></i>
                                        <span class="ms-1 text-dark">@ratingVal.ToString("0.0")</span>
                                    }
                                </div>

                                <!-- Tên sản phẩm -->
                                <h5 class="card-title fw-bold mb-1 text-truncate"
                                    data-bs-toggle="tooltip"
                                    title="@item.Name">
                                    @item.Name
                                </h5>

                                <!-- Tên cửa hàng -->
                                <p class="card-text text-muted small mb-2"
                                   data-bs-toggle="tooltip"
                                   title="@store?.Name">@store?.Name</p>

                                <!-- Giá + nút hành động -->
                                <div>
                                    <div class="mb-2"
                                         data-bs-toggle="tooltip"
                                         title="@(salePrice.HasValue && salePrice > 0 ? salePrice?.ToString("N0") + " đ" : "Chưa có giá")">
                                        @if (salePrice.HasValue && salePrice > 0)
                                        {
                                            <span class="text-crimson fw-bold">@salePrice?.ToString("N0") đ</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Chưa có giá</span>
                                        }
                                    </div>

                                    <!-- 👇 Nút theo cột -->
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-crimson btn-sm rounded-pill add-to-cart-btn"
                                                type="button"
                                                data-product-id="@item.Id"
                                                data-has-variant="@(hasVariant.ToString().ToLower())"
                                                data-bs-toggle="tooltip"
                                                title="Thêm sản phẩm @item.Name vào giỏ"
                                                onclick="event.stopPropagation();">
                                            <i class="bi bi-cart-plus"></i> Thêm
                                        </button>

                                        <button class="btn btn-outline-crimson btn-sm rounded-pill buy-now-btn"
                                                type="button"
                                                data-product-id="@item.Id"
                                                data-has-variant="@(hasVariant.ToString().ToLower())"
                                                data-bs-toggle="tooltip"
                                                title="Mua ngay sản phẩm @item.Name"
                                                onclick="event.stopPropagation();">
                                            Mua ngay
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>

                index++;
            }
        </div>
        <!-- Nút xem thêm -->
        <div class="text-center mt-3 mb-3">
            <button id="loadMoreBtn"
                    class="btn btn-outline-crimson px-4"
                    data-bs-toggle="tooltip"
                    title="Hiển thị thêm sản phẩm">
                Xem thêm
            </button>
        </div>
    </div>
</div>

<!-- Anti-forgery token cho QuickAdd -->
<form id="__quickAddToken" method="post">
    @Html.AntiForgeryToken()
</form>

<!-- Optional: Bạn có thể bổ sung đoạn script JS bên dưới để xử lý filter/sort frontend -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let shownCount = 12;
            const products = document.querySelectorAll("#productList > div");
            const loadMoreBtn = document.getElementById("loadMoreBtn");

            loadMoreBtn.addEventListener("click", function () {
                let nextCount = shownCount + 12;
                for (let i = shownCount; i < nextCount && i < products.length; i++) {
                    products[i].classList.remove("d-none");
                }
                shownCount = nextCount;

                if (shownCount >= products.length) {
                    loadMoreBtn.style.display = "none";
                }
            });

            if (products.length <= 12) {
                loadMoreBtn.style.display = "none";
            }
        });
    </script>

    <script>
        function getSelectedRatingBtns() {
            let ratings = [];
            document.querySelectorAll('.filter-rating-btn.active, .filter-rating-btn-mobile.active').forEach(btn => {
                ratings.push(btn.dataset.rating);
            });
            return ratings;
        }

        function filterProducts() {
            const keyword = document.querySelector("#searchInput").value.trim().toLowerCase() || document.querySelector("#searchInputMobile").value.trim().toLowerCase();
            const minPrice = parseInt(document.querySelector("#minPrice").value || document.querySelector("#minPriceMobile").value) || 0;
            const maxPrice = parseInt(document.querySelector("#maxPrice").value || document.querySelector("#maxPriceMobile").value) || Infinity;
            const category = document.querySelector("#categorySelect").value || document.querySelector("#categorySelectMobile").value;
            const province = document.querySelector("#provinceSelect").value || document.querySelector("#provinceSelectMobile").value;
            const ratings = getSelectedRatingBtns();

            const sortTypeBtns = document.querySelectorAll('.filter-btn-hover');
            let sortType = "";
            sortTypeBtns.forEach(btn => {
                if (btn.classList.contains("active")) sortType = btn.dataset.sort;
            });

            const priceSort = document.querySelector("#sortPriceSelect").value;

            let products = [...document.querySelectorAll("#productList > div.col-lg-3")];

            products.forEach(prod => {
                const title = prod.querySelector(".card-title").textContent.toLowerCase();
                const prodPrice = parseInt(prod.dataset.price) || 0;
                const prodCategory = prod.dataset.category;
                const prodProvince = prod.dataset.province;
                const prodRating = parseFloat(prod.dataset.rating) || 0;

                const priceCheck = (prodPrice >= minPrice && prodPrice <= maxPrice);
                const keywordCheck = title.includes(keyword);
                const categoryCheck = (!category || prodCategory === category);
                const provinceCheck = (!province || prodProvince === province);
                const ratingCheck = (ratings.length === 0 || ratings.some(r => {
                    if (r === "5") return prodRating >= 5;
                    if (r === "3-4") return prodRating >= 3 && prodRating < 5;
                    if (r === "1-2") return prodRating >= 1 && prodRating < 3;
                }));

                prod.style.display = (priceCheck && keywordCheck && categoryCheck && provinceCheck && ratingCheck) ? "" : "none";
            });

            // Sort
            if (priceSort || sortType) {
                products = products.filter(p => p.style.display !== "none");
                products.sort((a, b) => {
                    const priceA = parseFloat(a.dataset.price) || 0;
                    const priceB = parseFloat(b.dataset.price) || 0;

                    if (priceSort === "price-asc") return priceA - priceB;
                    if (priceSort === "price-desc") return priceB - priceA;
                    if (sortType === "newest") return b.dataset.id - a.dataset.id;
                    if (sortType === "popular") return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
                    if (sortType === "best-seller") return parseFloat(b.dataset.sold || 0) - parseFloat(a.dataset.sold || 0);
                    return 0;
                });

                const productList = document.getElementById("productList");
                productList.innerHTML = "";
                products.forEach(p => productList.appendChild(p));
            }
        }

        document.getElementById("applyFiltersBtn").addEventListener("click", filterProducts);
        document.getElementById("applyFiltersBtnMobile").addEventListener("click", filterProducts);

        document.querySelectorAll('.filter-rating-btn, .filter-rating-btn-mobile').forEach(btn => {
            btn.addEventListener('click', () => {
                btn.classList.toggle('active');
            });
        });

        document.querySelectorAll('.filter-btn-hover').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.filter-btn-hover').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                filterProducts();
            });
        });

        document.getElementById("sortPriceSelect").addEventListener("change", filterProducts);
    </script>

    <!-- ✅ Thêm mới QuickAdd Script -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          const tokenEl = document.querySelector('#__quickAddToken input[name="__RequestVerificationToken"]');
          const ANTIFORGERY = tokenEl ? tokenEl.value : null;
          const BUY_NOW_KEY = '__BUY_NOW_PIDS'; // chỉ dùng cho "Mua ngay"

          function toastOk(msg)  { if (window.showToast) showToast(msg, true);  else alert(msg); }
          function toastErr(msg) { if (window.showToast) showToast(msg, false); else alert(msg); }

          async function quickAdd(pid) {
            const fd = new FormData();
            fd.append('productId', pid);
            fd.append('quantity', '1');

            const headers = { 'X-Requested-With': 'XMLHttpRequest' };
            if (ANTIFORGERY) headers['RequestVerificationToken'] = ANTIFORGERY;

            const res = await fetch('/Cart/QuickAdd', {
              method: 'POST',
              body: fd,
              headers,
              credentials: 'same-origin'
            });

            const data = await res.json().catch(() => ({}));
            return { ok: res.ok && data?.success, data, status: res.status };
          }

          // ====== NEW: tick chọn item trong Cart (server-side) ======
          async function selectServer(pid, selected = true) {
            try {
              const fd = new FormData();
              fd.append('productId', pid);
              fd.append('selected', String(selected));
              const headers = { 'X-Requested-With': 'XMLHttpRequest' };
              if (ANTIFORGERY) headers['RequestVerificationToken'] = ANTIFORGERY;

              const res = await fetch('/Cart/Select', {
                method: 'POST',
                body: fd,
                headers,
                credentials: 'same-origin'
              });
              return res.ok;
            } catch {
              return false;
            }
          }

          // ====== NEW: fallback tick qua localStorage (để trang Cart tự tick) ======
          function selectLocalBuyNow(pid) {
            try {
              const arr = JSON.parse(localStorage.getItem(BUY_NOW_KEY) || '[]');
              if (!arr.includes(pid)) arr.push(pid);
              localStorage.setItem(BUY_NOW_KEY, JSON.stringify(arr));
            } catch {}
          }

          // ====== Thêm vào giỏ (KHÔNG tick) ======
          document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
              e.preventDefault();
              e.stopPropagation();

              const pid = btn.dataset.productId;
              const hasVariant = (btn.dataset.hasVariant === 'true');

              if (hasVariant) {
                window.location.href = `/Products/DetailProducts/${pid}`;
                return;
              }

              try {
                const { ok, data, status } = await quickAdd(pid);
                if (ok) {
                  if (typeof window.__CartBadge?.set === 'function' && typeof data.cartCount === 'number') {
                    window.__CartBadge.set(data.cartCount);
                  } else if (typeof window.__CartBadge?.add === 'function') {
                    window.__CartBadge.add(1);
                  }
                  toastOk(data.message || 'Đã thêm vào giỏ hàng!');
                  try {
                    const cartIcon = document.querySelector('.bi-cart-fill, .header-icon');
                    if (cartIcon) {
                      cartIcon.classList.add('shake');
                      setTimeout(() => cartIcon.classList.remove('shake'), 600);
                    }
                  } catch {}
                  return;
                }

                if (status === 401 || String(data?.message || '').toLowerCase().includes('đăng nhập')) {
                  window.location.href = '/Login';
                  return;
                }

                toastErr(data?.message || 'Thêm sản phẩm vào giỏ hàng thất bại.');
              } catch (err) {
                console.error(err);
                toastErr('Lỗi kết nối. Vui lòng thử lại.');
              }
            });
          });

          // ====== Mua ngay (CÓ tick) ======
          document.querySelectorAll('.buy-now-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
              e.preventDefault();
              e.stopPropagation();

              const pid = btn.dataset.productId;
              const hasVariant = (btn.dataset.hasVariant === 'true');

              if (hasVariant) {
                window.location.href = `/Products/DetailProducts/${pid}`;
                return;
              }

              const prevHTML = btn.innerHTML;
              btn.disabled = true;
              btn.innerHTML = 'Đang xử lý...';

              try {
                const { ok, data, status } = await quickAdd(pid);
                if (ok) {
                  // ✅ tick server; nếu lỗi → ghi LS để trang Cart tự tick
                  const ticked = await selectServer(pid, true);
                  if (!ticked) selectLocalBuyNow(pid);

                  if (typeof window.__CartBadge?.set === 'function' && typeof data.cartCount === 'number') {
                    window.__CartBadge.set(data.cartCount);
                  }
                  toastOk(data.message || 'Đã thêm vào giỏ hàng!');
                  window.location.href = '/Cart';
                  return;
                }

                if (status === 401 || String(data?.message || '').toLowerCase().includes('đăng nhập')) {
                  window.location.href = '/Login';
                  return;
                }

                // thất bại khác → qua chi tiết để chọn biến thể
                window.location.href = `/Products/DetailProducts/${pid}`;
              } catch (err) {
                console.error(err);
                window.location.href = `/Products/DetailProducts/${pid}`;
              } finally {
                btn.disabled = false;
                btn.innerHTML = prevHTML;
              }
            });
          });
        });
    </script>



    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>

    <!-- Hiển thị theo danh mục -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const params = new URLSearchParams(window.location.search);
            const catId = params.get("categoryId");

            if (!catId) return;

            // Desktop
            const selDesktop = document.getElementById("categorySelect");
            if (selDesktop) {
                selDesktop.value = catId;
                // Nếu dùng bootstrap-select (selectpicker):
                if (typeof $ !== "undefined" && typeof $.fn.selectpicker === "function") {
                    $('.selectpicker').selectpicker('refresh');
                }
            }

            // Mobile (nếu có)
            const selMobile = document.getElementById("categorySelectMobile");
            if (selMobile) {
                selMobile.value = catId;
            }

            // Gọi hàm filter có sẵn của bạn
            if (typeof filterProducts === "function") {
                filterProducts();
                // Optional: kéo tới danh sách
                try {
                    const list = document.getElementById("productList");
                    if (list) window.scrollTo({ top: list.offsetTop - 80, behavior: 'smooth' });
                } catch { }
            }
        });
    </script>



}