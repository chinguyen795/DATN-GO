﻿@using DATN_GO.Models
@using DATN_GO.ViewModels
@{
    ViewData["Title"] = "Food Page";
    var products = ViewBag.ProductList as List<Products>;
    var imagesDict = ViewBag.ImagesDict as Dictionary<int, List<string>>;
    var priceDict = ViewBag.MinMaxPriceDict as Dictionary<int, MinMaxPriceResponse>;
    var storeDict = ViewBag.StoreDict as Dictionary<int, Stores>;
    var categories = ViewBag.Categories as List<Categories>;
    var provinces = ViewBag.Provinces as List<string>;
}
<style>
    .card-title {
        display: -webkit-box;
        -webkit-line-clamp: 2; /* Giới hạn 2 dòng */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

</style>

<!-- Filter bar -->
<div class="bg-crimson rounded-3 mt-3 mb-5 py-3">
    <div class="d-flex flex-row align-items-center justify-content-between flex-wrap mx-2">
        <div class="text-white fw-bold me-2 my-auto">
            <button class="btn btn-outline-light d-lg-none me-2" type="button" data-bs-toggle="offcanvas"
                    data-bs-target="#filterOffcanvas">
                <i class="bi bi-funnel"></i> Bộ lọc
            </button>
            <span>Sắp xếp theo:</span>
        </div>
        <div class="d-flex flex-row gap-2 flex-wrap">
            <button class="btn text-white fw-bold border border-white filter-btn-hover" data-sort="newest">
                <i class="bi bi-clock-history me-1"></i> Mới nhất
            </button>
            <button class="btn text-white fw-bold border border-white filter-btn-hover" data-sort="popular">
                <i class="bi bi-graph-up me-1"></i> Phổ biến
            </button>
            <button class="btn text-white fw-bold border border-white filter-btn-hover" data-sort="best-seller">
                <i class="bi bi-bag-check me-1"></i> Bán chạy
            </button>
            <select id="sortPriceSelect" class="form-select bg-crimson text-white fw-bold border-0 border-bottom" style="width:auto; min-width:120px;">
                <option value="">Giá</option>
                <option value="price-asc">Giá tăng dần</option>
                <option value="price-desc">Giá giảm dần</option>
            </select>
        </div>
    </div>
</div>

<!-- content -->
<div class="row">
    <!-- Desktop Filter -->
    <div class="col-lg-3 d-none d-lg-block">
        <div class="filter-section">
            <h5 class="mb-3">Lọc sản phẩm</h5>
            <!-- Search -->
            <div class="mb-3">
                <label for="searchInput" class="form-label">
                    <i class="bi bi-search"></i> Tìm kiếm
                </label>
                <input type="text" id="searchInput" class="form-control" placeholder="Nhập từ khóa" />
            </div>

            <!-- Price Range -->
            <div class="mb-3">
                <label class="form-label">Khoảng giá</label>
                <div class="row g-2">
                    <div class="col-6">
                        <input type="number" class="form-control" id="minPrice" placeholder="Tối thiểu" min="0" />
                    </div>
                    <div class="col-6">
                        <input type="number" class="form-control" id="maxPrice" placeholder="Tối đa" min="0" />
                    </div>
                </div>
            </div>

            <!-- Category Filter -->
            <div class="mb-3">
                <label for="categorySelect" class="form-label">
                    <i class="bi bi-grid"></i> Danh mục
                </label>
                <select id="categorySelect" class="selectpicker w-100" data-live-search="true"
                        title="Chọn danh mục" data-width="auto">
                    <option value="">Tất cả danh mục</option>
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.Id" data-tokens="@cat.Name">@cat.Name</option>
                    }
                </select>
            </div>


            <!-- Province Filter -->
            <div class="mb-3">
                <label for="provinceSelect" class="form-label">
                    <i class="bi bi-geo-alt"></i> Tỉnh/Thành phố
                </label>
                <select id="provinceSelect" class="selectpicker w-100" data-live-search="true" data-width="auto">
                    <option value="">Tất cả địa điểm</option>
                    <option value="can-tho">Cần Thơ</option>
                    <option value="hcm">TP. Hồ Chí Minh</option>
                    <option value="ha-noi">Hà Nội</option>
                    <option value="da-nang">Đà Nẵng</option>
                    <option value="other">Tỉnh/TP khác</option>
                </select>
            </div>

            <!-- Star Rating Filter -->
            <div class="mb-3">
                <label class="form-label">Đánh giá</label>
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-crimson filter-rating-btn" data-rating="5">5 <i class="bi bi-star-fill"></i></button>
                    <button type="button" class="btn btn-outline-crimson filter-rating-btn" data-rating="3-4">3 đến 4 <i class="bi bi-star-fill"></i></button>
                    <button type="button" class="btn btn-outline-crimson filter-rating-btn" data-rating="1-2">1 đến 2 <i class="bi bi-star-fill"></i></button>
                </div>
            </div>

            <button id="applyFiltersBtn" class="btn btn-crimson w-100 mb-2">
                <i class="bi bi-search"></i> Tìm kiếm
            </button>
        </div>
    </div>

    <!-- Mobile Filter Offcanvas -->
    <div class="offcanvas offcanvas-start" tabindex="-1" id="filterOffcanvas">
        <div class="offcanvas-header text-crimson bg-light mx-0">
            <h5 class="offcanvas-title fw-bold">Bộ lọc</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="filter-section">
                <!-- Search -->
                <div class="mb-3">
                    <label for="searchInputMobile" class="form-label">
                        <i class="bi bi-search"></i> Tìm kiếm
                    </label>
                    <input type="text" id="searchInputMobile" class="form-control" placeholder="Nhập từ khóa" />
                </div>

                <!-- Price Range -->
                <div class="mb-3">
                    <label class="form-label">Khoảng giá</label>
                    <div class="row g-2">
                        <div class="col-6">
                            <input type="number" class="form-control" id="minPriceMobile" placeholder="Tối thiểu" min="0" />
                        </div>
                        <div class="col-6">
                            <input type="number" class="form-control" id="maxPriceMobile" placeholder="Tối đa" min="0" />
                        </div>
                    </div>
                </div>

                <!-- Category Filter -->
                <div class="mb-3">
                    <label for="categorySelectMobile" class="form-label">
                        <i class="bi bi-grid"></i> Danh mục
                    </label>
                    <select id="categorySelectMobile" class="form-select">
                        <option value="">Tất cả danh mục</option>
                        <option value="mon-nuoc">Món nước</option>
                        <option value="mon-kho">Món khô</option>
                        <option value="do-an-vat">Đồ ăn vặt</option>
                        <option value="do-uong">Đồ uống</option>
                        <option value="trang-mieng">Tráng miệng</option>
                    </select>
                </div>

                <!-- Province Filter -->
                <div class="mb-3">
                    <label for="provinceSelectMobile" class="form-label">
                        <i class="bi bi-geo-alt"></i> Tỉnh/Thành phố
                    </label>
                    <select id="provinceSelectMobile" class="form-select">
                        <option value="">Tất cả địa điểm</option>
                        <option value="can-tho">Cần Thơ</option>
                        <option value="hcm">TP. Hồ Chí Minh</option>
                        <option value="ha-noi">Hà Nội</option>
                        <option value="da-nang">Đà Nẵng</option>
                        <option value="other">Tỉnh/TP khác</option>
                    </select>
                </div>

                <!-- Star Rating Filter -->
                <div class="mb-3">
                    <label class="form-label">Đánh giá</label>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-outline-crimson filter-rating-btn-mobile" data-rating="5">5 <i class="bi bi-star-fill"></i></button>
                        <button type="button" class="btn btn-outline-crimson filter-rating-btn-mobile" data-rating="3-4">3 đến 4 <i class="bi bi-star-fill"></i></button>
                        <button type="button" class="btn btn-outline-crimson filter-rating-btn-mobile" data-rating="1-2">1 đến 2 <i class="bi bi-star-fill"></i></button>
                    </div>
                </div>

                <button id="applyFiltersBtnMobile" class="btn btn-crimson w-100 " data-bs-dismiss="offcanvas">
                    <i class="bi bi-search"></i> Áp dụng bộ lọc
                </button>
            </div>
        </div>
    </div>

    <!-- Product List -->
    <div class="col-lg-9">
        <div class="row" id="productList">
            @{
                int index = 0; // biến đếm
            }
            @foreach (var item in products)
            {
                var category = categories.FirstOrDefault(c => c.Id == item.CategoryId);
                var images = imagesDict.ContainsKey(item.Id) ? imagesDict[item.Id] : new List<string>();
                var priceInfo = priceDict.ContainsKey(item.Id) ? priceDict[item.Id] : null;
                var store = storeDict.ContainsKey(item.Id) ? storeDict[item.Id] : null;

                decimal? salePrice = null;
                if (priceInfo != null)
                {
                    if (priceInfo.IsVariant)
                    {
                        salePrice = priceInfo.MinPrice ?? priceInfo.MaxPrice;
                    }
                    else
                    {
                        salePrice = priceInfo.Price ?? 0;
                    }
                }

                float ratingVal = store?.Rating ?? 4.8f;

                var hiddenClass = index >= 12 ? "d-none" : ""; // ẩn nếu vượt quá 12 sp đầu

                <div class="col-lg-3 col-md-4 col-sm-6 mb-2 @hiddenClass"
                     data-aos="fade-up"
                     data-category="@item.CategoryId"
                     data-province="@store?.Address"
                     data-rating="@store?.Rating"
                     data-price="@salePrice">
                    <a href="/Products/DetailProducts/@item.Id" class="text-decoration-none text-dark d-block h-100">
                        <div class="product-card card h-100 border-0 shadow-sm hover-scale">
                            <div class="position-relative">
                                <img src="@(images.FirstOrDefault() ?? "/image/default.png")"
                                     class="card-img-top"
                                     style="height: 200px; object-fit: cover;"
                                     alt="@item.Name" />
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="badge bg-light text-crimson">@category?.Name</span>
                                    <div class="rating text-warning">
                                        <i class="bi bi-star-fill"></i>
                                        <span class="ms-1 text-dark">@ratingVal.ToString("0.0")</span>
                                    </div>
                                </div>
                                <h5 class="card-title fw-bold mb-1" style="display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden;text-overflow:ellipsis;">@item.Name</h5>
                                <p class="card-text text-muted small mb-2">@store?.Name</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        @if (salePrice.HasValue && salePrice > 0)
                                        {
                                            <span class="text-crimson fw-bold">@salePrice?.ToString("N0") đ</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Chưa có giá</span>
                                        }
                                    </div>
                                    <button class="btn btn-crimson btn-sm rounded-pill" type="button" onclick="event.stopPropagation(); window.location.href='/Products/DetailProducts/@item.Id'">
                                        <i class="bi bi-cart-plus"></i> Thêm
                                    </button>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>

                index++;
            }
        </div>
        <!-- Nút xem thêm -->
        <div class="text-center mt-3 mb-3">
            <button id="loadMoreBtn" class="btn btn-outline-crimson px-4">Xem thêm</button>
        </div>
    </div>
</div>

<!-- Optional: Bạn có thể bổ sung đoạn script JS bên dưới để xử lý filter/sort frontend -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let shownCount = 12;
            const products = document.querySelectorAll("#productList > div");
            const loadMoreBtn = document.getElementById("loadMoreBtn");

            loadMoreBtn.addEventListener("click", function () {
                let nextCount = shownCount + 12;
                for (let i = shownCount; i < nextCount && i < products.length; i++) {
                    products[i].classList.remove("d-none");
                }
                shownCount = nextCount;

                if (shownCount >= products.length) {
                    loadMoreBtn.style.display = "none";
                }
            });

            if (products.length <= 12) {
                loadMoreBtn.style.display = "none";
            }
        });
    </script>
    <script>
        // Ví dụ đơn giản lọc frontend (chỉ minh họa)
        function getSelectedRatingBtns() {
          let ratings = [];
          document.querySelectorAll('.filter-rating-btn.active, .filter-rating-btn-mobile.active').forEach(btn=>{
            ratings.push(btn.dataset.rating);
          });
          return ratings;
        }

        function filterProducts() {
            const keyword = document.getElementById("searchInput").value.trim().toLowerCase();
            const minPrice = parseInt(document.getElementById("minPrice").value) || 0;
            const maxPrice = parseInt(document.getElementById("maxPrice").value) || Infinity;
            const category = document.getElementById("categorySelect").value;
            const province = document.getElementById("provinceSelect").value;
            const ratings = getSelectedRatingBtns();

            const sortTypeBtns = document.querySelectorAll('.filter-btn-hover');
            let sortType = "";
            sortTypeBtns.forEach(btn=>{
                if(btn.classList.contains("active")) sortType = btn.dataset.sort;
            });

            const priceSort = document.getElementById("sortPriceSelect").value;

            let products = document.querySelectorAll("#productList > div.col-lg-3");

            products.forEach(prod => {
                const title = prod.querySelector(".card-title").textContent.toLowerCase();
                const prodPrice = parseInt(prod.dataset.price) || 0;
                const prodCategory = prod.dataset.category;
                const prodProvince = prod.dataset.province;
                const prodRating = parseFloat(prod.dataset.rating) || 0;

                let priceCheck = (prodPrice >= minPrice && prodPrice <= maxPrice);
                let keywordCheck = title.includes(keyword);
                let categoryCheck = (!category || prodCategory === category);
                let provinceCheck = (!province || prodProvince === province);
                let ratingCheck = (ratings.length === 0 || ratings.some(r => {
                    if(r === "5") return prodRating >= 5;
                    if(r === "3-4") return prodRating >= 3 && prodRating < 5;
                    if(r === "1-2") return prodRating >=1 && prodRating < 3;
                }));

                prod.style.display = (priceCheck && keywordCheck && categoryCheck && provinceCheck && ratingCheck) ? "" : "none";
            });

            // TODO: Thêm logic sort theo sortType hoặc priceSort nếu cần
        }

        document.getElementById("applyFiltersBtn").addEventListener("click", filterProducts);
        document.getElementById("applyFiltersBtnMobile").addEventListener("click", filterProducts);

        // Toggle active class for rating buttons
        document.querySelectorAll('.filter-rating-btn, .filter-rating-btn-mobile').forEach(btn => {
            btn.addEventListener('click', () => {
                btn.classList.toggle('active');
            });
        });

        // Toggle active class for sort buttons
        document.querySelectorAll('.filter-btn-hover').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.filter-btn-hover').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });

        // Sync mobile desktop filters if cần
    </script>
    <script>
        function getSelectedRatingBtns() {
          let ratings = [];
          document.querySelectorAll('.filter-rating-btn.active, .filter-rating-btn-mobile.active').forEach(btn => {
            ratings.push(btn.dataset.rating);
          });
          return ratings;
        }

        function filterProducts() {
            const keyword = document.querySelector("#searchInput").value.trim().toLowerCase() || document.querySelector("#searchInputMobile").value.trim().toLowerCase();
            const minPrice = parseInt(document.querySelector("#minPrice").value || document.querySelector("#minPriceMobile").value) || 0;
            const maxPrice = parseInt(document.querySelector("#maxPrice").value || document.querySelector("#maxPriceMobile").value) || Infinity;
            const category = document.querySelector("#categorySelect").value || document.querySelector("#categorySelectMobile").value;
            const province = document.querySelector("#provinceSelect").value || document.querySelector("#provinceSelectMobile").value;
            const ratings = getSelectedRatingBtns();

            const sortTypeBtns = document.querySelectorAll('.filter-btn-hover');
            let sortType = "";
            sortTypeBtns.forEach(btn => {
                if (btn.classList.contains("active")) sortType = btn.dataset.sort;
            });

            const priceSort = document.querySelector("#sortPriceSelect").value;

            let products = [...document.querySelectorAll("#productList > div.col-lg-3")];

            products.forEach(prod => {
                const title = prod.querySelector(".card-title").textContent.toLowerCase();
                const prodPrice = parseInt(prod.dataset.price) || 0;
                const prodCategory = prod.dataset.category;
                const prodProvince = prod.dataset.province;
                const prodRating = parseFloat(prod.dataset.rating) || 0;

                const priceCheck = (prodPrice >= minPrice && prodPrice <= maxPrice);
                const keywordCheck = title.includes(keyword);
                const categoryCheck = (!category || prodCategory === category);
                const provinceCheck = (!province || prodProvince === province);
                const ratingCheck = (ratings.length === 0 || ratings.some(r => {
                    if (r === "5") return prodRating >= 5;
                    if (r === "3-4") return prodRating >= 3 && prodRating < 5;
                    if (r === "1-2") return prodRating >= 1 && prodRating < 3;
                }));

                prod.style.display = (priceCheck && keywordCheck && categoryCheck && provinceCheck && ratingCheck) ? "" : "none";
            });

            // Sort
            if (priceSort || sortType) {
                products = products.filter(p => p.style.display !== "none");
                products.sort((a, b) => {
                    const priceA = parseFloat(a.dataset.price) || 0;
                    const priceB = parseFloat(b.dataset.price) || 0;

                    if (priceSort === "price-asc") return priceA - priceB;
                    if (priceSort === "price-desc") return priceB - priceA;
                    if (sortType === "newest") return b.dataset.id - a.dataset.id;
                    if (sortType === "popular") return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
                    if (sortType === "best-seller") return parseFloat(b.dataset.sold || 0) - parseFloat(a.dataset.sold || 0);
                    return 0;
                });

                const productList = document.getElementById("productList");
                productList.innerHTML = "";
                products.forEach(p => productList.appendChild(p));
            }
        }

        document.getElementById("applyFiltersBtn").addEventListener("click", filterProducts);
        document.getElementById("applyFiltersBtnMobile").addEventListener("click", filterProducts);

        document.querySelectorAll('.filter-rating-btn, .filter-rating-btn-mobile').forEach(btn => {
            btn.addEventListener('click', () => {
                btn.classList.toggle('active');
            });
        });

        document.querySelectorAll('.filter-btn-hover').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.filter-btn-hover').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                filterProducts();
            });
        });

        document.getElementById("sortPriceSelect").addEventListener("change", filterProducts);
    </script>
}