﻿@using DATN_GO.ViewModels.Store
@model StoreAdminViewModel

@{
    ViewData["Title"] = "Detail Diner Page";
    var priceDict = ViewBag.MinMaxPriceDict as System.Collections.IDictionary;
}
<style>
    .text-truncate-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

</style>
<!-- Store Banner Section -->
<section class="store-banner position-relative">
    <div style="height: 400px; overflow: hidden;">
        <img src="@Model.CoverPhoto" alt="Store Banner" class="w-100 h-100 object-fit-cover opacity-75">
    </div>

    <!-- Store Info Overlay -->
    <div class="container position-relative mb-3">
        <div class="row">
            <div class="col-lg-8 col-md-10 mx-auto">
                <div class="card shadow" style="margin-top: -50px;">
                    <div class="card-body">
                        <!-- Store Header -->
                        <div class="d-flex align-items-center mb-4">
                            <img src="@Model.Avatar" alt="@Model.Name" class="rounded-circle border border-3 border-white shadow-sm" style="width: 100px; height: 100px; object-fit: cover;">
                            <div class="ms-3">
                                <h2 class="mb-1 text-danger">@Model.Name</h2>
                                <p class="text-muted mb-0">
                                    <i class="bi bi-geo-alt-fill"></i>
                                    @Model.Province
                                </p>
                            </div>
                        </div>

                        <!-- Store Stats -->
                        <div class="row g-3 text-center mb-4">
                            <div class="col">
                                <div class="border rounded p-3 bg-light">
                                    <div class="text-danger h4 mb-0">@Model.Products?.Count</div>
                                    <small class="text-muted">Sản phẩm</small>
                                </div>
                            </div>
                            <div class="col">
                                <div class="border rounded p-3 bg-light">
                                    <div class="text-danger h4 mb-0">@Model.TotalSoldProducts</div>
                                    <small class="text-muted">Đã bán</small>
                                </div>
                            </div>
                            @*                             <div class="col">
                            <div class="border rounded p-3 bg-light">
                            <div class="text-danger h4 mb-0">0</div>
                            <small class="text-muted">Người theo dõi</small>
                            </div>
                            </div> *@
                        </div>

                        <!-- Store Rating -->
                        @{
                            // ⭐ Tính số sao: full / half / empty
                            var avg = Model.AverageRating; // double
                            if (double.IsNaN(avg)) { avg = 0; }
                            if (avg < 0) avg = 0; if (avg > 5) avg = 5;

                            var full = (int)Math.Floor(avg);
                            var frac = avg - full;
                            var hasHalf = frac >= 0.25 && frac < 0.75; // ngưỡng nửa sao
                            if (frac >= 0.75) { full += 1; hasHalf = false; } // đẩy lên full sao nếu gần đủ

                            if (full > 5) full = 5;
                            var empty = 5 - full - (hasHalf ? 1 : 0);
                        }
                        <div class="d-flex align-items-center gap-2 mb-4">
                            <h4 class="mb-0 text-danger">@avg.ToString("0.0")</h4>
                            <div class="text-warning">
                                @for (int i = 0; i < full; i++)
                                {
                                    <i class="bi bi-star-fill"></i>
                                }
                                @if (hasHalf)
                                {
                                    <i class="bi bi-star-half"></i>
                                }
                                @for (int i = 0; i < empty; i++)
                                {
                                    <i class="bi bi-star"></i>
                                }
                            </div>
                            <span class="text-muted">(@Model.ReviewCount đánh giá)</span>
                        </div>

                        <!-- Action Buttons -->
                        @*                         <div class="d-flex gap-2">
                        <button class="btn btn-outline-danger w-100">
                        <i class="bi bi-heart me-1"></i>
                        Theo dõi
                        </button>
                        <a class="btn btn-danger w-100 text-decoration-none text-white" asp-controller="Chat" asp-action="Chat">
                        <i class="bi bi-chat-dots me-1"></i>
                        Chat ngay
                        </a>
                        </div> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="container mt-4">
    <div class="card border rounded-3 shadow-lg">
        <div class="card-header bg-crimson text-white fw-bold p-3 rounded-top">
            <h5 class="mb-0"><i class="bi bi-ticket-perforated me-1"></i> Voucher của Shop</h5>
        </div>
        <div class="card-body position-relative px-3 bg-light">
            <div class="voucher-container py-2 px-1">
                <div class="voucher-scroll d-flex gap-3 p-2" id="voucherList">
                    <!-- Voucher sẽ được render ở đây bằng JavaScript -->
                    <div class="text-muted">Hiện chưa có voucher nào từ cửa hàng này.</div>
                </div>
            </div>
        </div>
    </div>
</section>


<!-- Filter Section -->
<section class="container mt-4 mb-4">
    <div class="row g-3">
        <!-- Search Bar -->
        <div class="col-12 col-md-3">
            <div class="input-group">
                <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm...">
                <button id="searchBtn" class="btn btn-outline-danger" type="button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>



        <!-- Category Filter -->
        <!--   <div class="col-12 col-md-3">
               <select class="form-select border-danger" id="foodTypeFilter">
                   <option value="">Tất cả món ăn</option>
                   <option value="mon-nuoc">Món nước</option>
                   <option value="mon-kho">Món khô</option>
                   <option value="do-an-vat">Đồ ăn vặt</option>
                   <option value="trang-mieng">Tráng miệng</option>
               </select>
           </div>
              -->
        <!-- Sort Options -->
        <div class="col-12 col-md-3">
            <select class="form-select border-danger" id="sortFilter">
                <option value="">Sắp xếp theo</option>
                <option value="price-asc">Giá thấp đến cao</option>
                <option value="price-desc">Giá cao đến thấp</option>
                <option value="newest">Mới nhất</option>
            </select>
        </div>

        <!-- Filter Buttons -->
        <div class="col-12 col-md-3 d-flex gap-2">
            <button class="btn btn-outline-crimson flex-grow-1" id="bestSellingFilter">
                <i class="bi bi-graph-up"></i> Bán chạy
            </button>
            <button class="btn btn-outline-crimson flex-grow-1" id="discountedFilter">
                <i class="bi bi-tag"></i> Giảm giá
            </button>


        </div>
    </div>
</section>

<section class="mb-3">
    <div class="row g-4">
        @foreach (var product in Model.Products)
        {
            // ==== Bắt variant giống code #2 ====
            var minMaxDict = ViewBag.MinMaxPriceDict as IDictionary<int, object>;
            dynamic priceInfo = (minMaxDict != null && minMaxDict.ContainsKey(product.Id))
            ? minMaxDict[product.Id]
            : null;

            bool hasVariant = false;
            decimal? displayPrice = product.Price ?? 0m;

            // 👉 KHAI BÁO Ở OUTER SCOPE để dùng cho data-attrs bên dưới
            decimal? minPrice = null, maxPrice = null, priceVal = null;

            if (priceInfo != null)
            {
                // IsVariant (try-catch vì dynamic có thể quăng format)
                bool isVar = false;
                try { isVar = (bool)priceInfo.IsVariant; } catch { /* ignore */ }

                // Min/Max/Price (nullable)
                try { minPrice = (decimal?)priceInfo.MinPrice; } catch { }
                try { maxPrice = (decimal?)priceInfo.MaxPrice; } catch { }
                try { priceVal = (decimal?)priceInfo.Price; } catch { }

                // Luật: có variant nếu server báo IsVariant = true, hoặc min != max
                hasVariant = isVar || (minPrice.HasValue && maxPrice.HasValue && minPrice != maxPrice);

                // Giá hiển thị ưu tiên Price, rồi Min, rớt về product.CostPrice
                displayPrice = priceVal ?? minPrice ?? product.Price ?? 0m;
            }
            else
            {
                // Không có info giá → cho là có variant để ép sang chi tiết (an toàn)
                hasVariant = true;
                displayPrice = product.Price ?? 0m;
            }

            // ==== Giá gốc/discount demo (giữ nguyên logic cũ) ====
            var prodCost = ViewBag.DebugPrice ?? 0m;
            var prodOriginal = product.Price > 0 ? product.Price : prodCost * 1.3m;
            var prodDiscount = prodOriginal > prodCost ? Math.Round((prodOriginal - prodCost) / prodOriginal * 100) : 0;

            // ⭐ average rating
            double ratingAvg = product.Rating.HasValue ? (double)product.Rating.Value : 0.0;
            if (ratingAvg < 0) ratingAvg = 0;
            else if (ratingAvg > 5) ratingAvg = 5;

            int fullStars = (int)Math.Floor(ratingAvg);
            double fracPart = ratingAvg - fullStars;
            bool hasHalfStar = fracPart >= 0.25 && fracPart < 0.75;
            if (fracPart >= 0.75) { fullStars += 1; hasHalfStar = false; }
            if (fullStars > 5) fullStars = 5;
            int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

            <div class="col-xl-3 col-lg-4 col-md-6 product-col" data-aos="fade-up">
                <div class="product-card card h-100 border rounded-3 shadow-lg hover-scale"
                     style="transition: all 0.3s ease; border-color: #f8d7da;">

                    <div class="position-relative">
                        <a asp-controller="Products" asp-action="DetailProducts" asp-route-id="@product.Id">
                            <img src="@product.MainImage"
                                 class="card-img-top rounded-top"
                                 style="height: 200px; object-fit: cover;"
                                 alt="@product.Name"
                                 data-bs-toggle="tooltip" data-bs-container="body" title="@product.Name"
                                 onerror="this.onerror=null;this.src='/images/no-image.png';" />
                        </a>
                    </div>

                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <!-- Badge danh mục -->
                            <span class="badge bg-light text-danger"
                                  data-bs-toggle="tooltip" data-bs-container="body"
                                  title="@product.CategoryName">
                                @product.CategoryName
                            </span>

                            <!-- Rating -->
                            <div class="rating d-flex align-items-center text-warning"
                                 data-bs-toggle="tooltip" data-bs-container="body"
                                 title="@(ratingAvg <= 0 ? "Chưa có đánh giá" : $"Đánh giá: {ratingAvg:0.0} sao")">
                                @if (ratingAvg <= 0)
                                {
                                    <span class="text-muted small fst-italic">Chưa có đánh giá</span>
                                }
                                else
                                {
                                    <i class="bi bi-star-fill icon-sm"></i>
                                    <span class="ms-1 text-dark">@ratingAvg.ToString("0.0")</span>
                                }
                            </div>
                        </div>

                        <!-- Tên sản phẩm -->
                        <h5 class="card-title fw-bold mb-1 text-truncate-1"
                            data-bs-toggle="tooltip" data-bs-container="body" title="@product.Name">
                            <a asp-controller="Products"
                               asp-action="DetailProducts"
                               asp-route-id="@product.Id"
                               class="text-dark text-decoration-none">
                                @product.Name
                            </a>
                        </h5>

                        <!-- Tên cửa hàng -->
                        <p class="card-text text-muted small mb-2 text-truncate-1"
                           data-bs-toggle="tooltip" data-bs-container="body" title="@product.StoreName">
                            @product.StoreName
                        </p>

                        <div>
                            <!-- Giá -->
                            <div class="mb-2"
                                 data-bs-toggle="tooltip" data-bs-container="body"
                                 title="@(displayPrice.HasValue && displayPrice > 0 ? string.Format("{0:N0} ₫", displayPrice) : "Chưa có giá")">
                                <span class="text-danger fw-bold">
                                    @string.Format("{0:N0} ₫", displayPrice ?? 0m)
                                </span>
                                @* nếu muốn show discount:
                            @if (prodDiscount > 0) {
                            <span class="ms-2 text-muted small">(-@prodDiscount%)</span>
                            } *@
                            </div>

                            <!-- Hai nút dưới giá -->
                            <div class="d-grid gap-2">
                                <button class="btn btn-crimson btn-sm rounded-pill add-to-cart-btn"
                                        type="button"
                                        data-product-id="@product.Id"
                                        data-has-variant="@(hasVariant ? "true" : "false")"
                                        data-min-price="@(minPrice?.ToString() ?? "")"
                                        data-max-price="@(maxPrice?.ToString() ?? "")"
                                        data-bs-toggle="tooltip" data-bs-container="body"
                                        title="Thêm sản phẩm @product.Name vào giỏ">
                                    <i class="bi bi-cart-plus icon-sm"></i> Thêm
                                </button>

                                <button class="btn btn-outline-crimson btn-sm rounded-pill buy-now-btn"
                                        type="button"
                                        data-product-id="@product.Id"
                                        data-has-variant="@(hasVariant ? "true" : "false")"
                                        data-min-price="@(minPrice?.ToString() ?? "")"
                                        data-max-price="@(maxPrice?.ToString() ?? "")"
                                        data-bs-toggle="tooltip" data-bs-container="body"
                                        title="Mua ngay sản phẩm @product.Name">
                                    Mua ngay
                                </button>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
        }
    </div>
</section>


<!-- Anti-forgery token -->
<form id="__quickAddToken" method="post">
    @Html.AntiForgeryToken()
</form>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        function performSearch() {
            var searchTerm = $('#searchInput').val().toLowerCase();

            $('.product-card').each(function () {
                var card = $(this);
                var productName = card.find('.card-title').text().toLowerCase();
                var parentCol = card.closest('.product-col'); // dùng class an toàn hơn

                if (productName.includes(searchTerm)) {
                    parentCol.show();
                } else {
                    parentCol.hide();
                }
            });

            // Scroll to the first visible product
            var firstVisible = $('.product-card:visible').first();
            if (firstVisible.length) {
                $('html, body').animate({
                    scrollTop: firstVisible.offset().top - 100
                }, 500);
            }
        }

        // Sự kiện click tìm kiếm
        $('#searchBtn').click(function () {
            performSearch();
        });

        // Sự kiện Enter trong input
        $('#searchInput').keypress(function (event) {
            if (event.which === 13) {
                performSearch();
            }
        });
    });
</script>

<script>
      async function loadVouchers(storeId) {
      try {
        const res = await fetch(`/Store/Voucher/${storeId}`);
        if (!res.ok) throw new Error("Không thể tải voucher");

        // Trường hợp API trả JSON string bọc JSON => vẫn giữ nguyên như bạn làm
        const resJson = await res.json();
        const vouchers = JSON.parse(resJson);

        const container = document.getElementById("voucherList");
        if (!vouchers || vouchers.length === 0) {
          container.innerHTML = `<p class="text-muted">Hiện chưa có voucher nào từ cửa hàng này.</p>`;
          return;
        }

        // ===== Helpers (thêm mới) =====
        const truthy = (v) => {
          if (typeof v === 'boolean') return v;
          if (typeof v === 'number') return v === 1;
          if (typeof v === 'string') {
            const s = v.trim().toLowerCase();
            // các cách mô tả % hay gặp
            return ['percent', 'percentage', '%', 'true', '1'].includes(s);
          }
          return false;
        };
        const getIsPercent = (v) => {
          // Ưu tiên các tên field chuẩn; fallback nếu backend đổi casing
          const raw = v.isPercentage ?? v.IsPercentage ?? v.discountType ?? v.DiscountType ?? v.type ?? v.Type;
          // LƯU Ý: 'Shop' KHÔNG phải % — đừng đưa vào truthy
          return truthy(raw);
        };
        const toVN = (n) => Number(n || 0).toLocaleString("vi-VN");

        container.innerHTML = "";

        for (const voucher of vouchers) {
          const isPercent = getIsPercent(voucher);

          // Giá trị giảm
          let reduceVal = Number(voucher.reduce ?? voucher.Reduce ?? 0);
          if (isPercent) {
            // clamp 1–100 cho đẹp dữ liệu (nếu backend lỡ bắn lố)
            reduceVal = Math.max(1, Math.min(100, Math.round(reduceVal)));
          }

          const reduceText = isPercent
            ? `Giảm ${reduceVal}%`
            : `Giảm ${toVN(reduceVal)}₫`;

          const minOrder = toVN(voucher.minOrder ?? voucher.MinOrder ?? 0);
          const endDate = new Date(voucher.endDate ?? voucher.EndDate).toLocaleDateString("vi-VN");

          // ===== Giữ nguyên logic check “Đã lưu” của bạn =====
          let isSaved = false;
          try {
            const checkUrl = `/Voucher/CheckSaved?voucherId=${voucher.id ?? voucher.Id}`;
            const checkResponse = await fetch(checkUrl);
            if (checkResponse.ok) {
              const checkResult = await checkResponse.json();
              isSaved = checkResult.isSaved === true;
            }
          } catch (error) {
            console.error(`Error checking voucher ${voucher.id ?? voucher.Id}:`, error);
          }

          const buttonText = isSaved ? "Đã lưu" : "Lưu";
          const buttonClass = isSaved ? "btn btn-secondary" : "btn btn-outline-danger";
          const buttonDisabled = isSaved ? "disabled" : "";

          const id = voucher.id ?? voucher.Id;

          const html = `
            <div class="voucher-item">
              <div class="border rounded p-3 d-flex align-items-center justify-content-between bg-light" style="min-width: 320px;">
                <div class="d-flex align-items-center gap-3">
                  <div class="text-danger" style="font-size: 2rem;">
                    <i class="bi bi-ticket-perforated-fill"></i>
                  </div>
                  <div>
                    <h6 class="mb-1">${reduceText}</h6>
                    <p class="text-muted small mb-0">Đơn tối thiểu: ${minOrder}₫</p>
                    <small class="text-danger">HSD: ${endDate}</small>
                  </div>
                </div>
                <button class="${buttonClass}" ${buttonDisabled} onclick="saveVoucher(${id}, this)">${buttonText}</button>
              </div>
            </div>`;
          container.insertAdjacentHTML("beforeend", html);
        }
      } catch (error) {
        console.error(error);
        document.getElementById("voucherList").innerHTML = `<p class="text-danger">Lỗi khi tải voucher.</p>`;
      }
    }


    document.addEventListener("DOMContentLoaded", function () {
        const storeId = @Model.Id
            loadVouchers(storeId);
    });

    async function saveVoucher(voucherId, buttonElement) {
        try {
            const response = await fetch('/Voucher/SaveVoucher', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    VoucherId: voucherId
                })
            });

            const result = await response.json();

            if (result.success) {
                // Cập nhật button thành "Đã lưu"
                buttonElement.textContent = "Đã lưu";
                buttonElement.className = "btn btn-secondary";
                buttonElement.disabled = true;

                // Hiển thị thông báo thành công
                showToast("Lưu voucher thành công!", "success");
            } else {
                showToast(result.message || "Có lỗi xảy ra khi lưu voucher", "error");
            }
        } catch (error) {
            console.error('Error saving voucher:', error);
            showToast("Có lỗi xảy ra khi lưu voucher", "error");
        }
    }

    function showToast(message, type) {
        // Tạo toast notification đơn giản
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <span>${message}</span>
                            <button type="button" class="btn-close" onclick="this.parentElement.parentElement.remove()"></button>
                        </div>
                    `;

        document.body.appendChild(toast);

        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            if (toast.parentElement) {
                toast.remove();
            }
        }, 3000);
    }
</script>




<script>
    (() => {
        if (window.__QuickAddBound2) return;
        window.__QuickAddBound2 = true;

        const BUY_NOW_KEY = '__BUY_NOW_PIDS';
        const getToken = () =>
            document.querySelector('#__quickAddToken input[name="__RequestVerificationToken"]')?.value
            || document.querySelector('input[name="__RequestVerificationToken"]')?.value
            || null;

        const toastOk = (m) => window.showToast ? showToast(m, true) : alert(m);
        const toBool = (v) => String(v).trim().toLowerCase() === 'true';

        // Quyết định có cần sang trang chi tiết để chọn biến thể
        function needsVariant(btn) {
            const flagRaw = btn.dataset.hasVariant;
            if (flagRaw != null && flagRaw !== '') {
                const v = flagRaw.trim().toLowerCase();
                if (v === 'true') return true;
                if (v === 'false') return false;
            }
            const minStr = btn.dataset.minPrice ?? '';
            const maxStr = btn.dataset.maxPrice ?? '';
            const min = Number(minStr), max = Number(maxStr);
            if (!Number.isNaN(min) && !Number.isNaN(max)) return min !== max;
            return false; // thiếu dữ liệu → coi như không variant
        }

        async function quickAdd(pid) {
            const fd = new FormData();
            fd.append('productId', pid);
            fd.append('quantity', '1');

            const headers = { 'X-Requested-With': 'XMLHttpRequest' };
            const token = getToken();
            if (token) headers['RequestVerificationToken'] = token;

            let res;
            try {
                res = await fetch('/Cart/QuickAdd', {
                    method: 'POST', body: fd, headers, credentials: 'same-origin'
                });
            } catch {
                return { ok: false, status: 0, data: { message: 'Không thể kết nối máy chủ.' } };
            }

            const data = await res.json().catch(() => ({}));
            return { ok: res.ok && !!data?.success, data, status: res.status };
        }

        // Tick chọn trên server cho "Mua ngay"
        async function selectServer(pid, selected = true) {
            try {
                const fd = new FormData();
                fd.append('productId', pid);
                fd.append('selected', String(selected));

                const headers = { 'X-Requested-With': 'XMLHttpRequest' };
                const token = getToken();
                if (token) headers['RequestVerificationToken'] = token;

                const res = await fetch('/Cart/Select', {
                    method: 'POST', body: fd, headers, credentials: 'same-origin'
                });
                return res.ok;
            } catch {
                return false;
            }
        }

        // Fallback: ghi localStorage để trang Cart tự tick
        function selectLocalBuyNow(pid) {
            try {
                const arr = JSON.parse(localStorage.getItem(BUY_NOW_KEY) || '[]');
                if (!arr.includes(pid)) arr.push(pid);
                localStorage.setItem(BUY_NOW_KEY, JSON.stringify(arr));
            } catch { }
        }

        function updateCartBadge(count, deltaIfNoCount = 0) {
            if (typeof window.__CartBadge?.set === 'function' && typeof count === 'number') {
                window.__CartBadge.set(count);
            } else if (typeof window.__CartBadge?.add === 'function') {
                window.__CartBadge.add(deltaIfNoCount);
            }
        }

        document.addEventListener('click', async (e) => {
            const addBtn = e.target.closest('.add-to-cart-btn');
            const buyBtn = e.target.closest('.buy-now-btn');
            if (!addBtn && !buyBtn) return;

            e.preventDefault();

            const btn = addBtn || buyBtn;
            const pid = btn.dataset.productId;
            if (!pid) return;

            const prevHTML = btn.innerHTML;
            btn.disabled = true;
            btn.innerHTML = 'Đang xử lý...';

            try {
                // Có variant → vào chi tiết
                if (needsVariant(btn)) {
                    window.location.href = `/Products/DetailProducts/${pid}`;
                    return;
                }

                // Không variant → QuickAdd
                const { ok, data, status } = await quickAdd(pid);
                const msg = String(data?.message || '').toLowerCase();

                if (ok) {
                    updateCartBadge(data.cartCount, 1);
                    toastOk(data.message || 'Đã thêm vào giỏ hàng!');

                    if (buyBtn) {
                        // ✅ "Mua ngay": tick server, nếu fail thì LS fallback, rồi vào /Cart
                        const ticked = await selectServer(pid, true);
                        if (!ticked) selectLocalBuyNow(pid);
                        window.location.href = '/Cart';
                    }
                    // "Thêm": ở lại trang, done
                    return;
                }

                if (status === 401 || msg.includes('đăng nhập')) {
                    window.location.href = '/Login';
                    return;
                }

                // Server báo cần chọn biến thể → vào chi tiết
                if (status >= 400 && status < 500 && (msg.includes('variant') || msg.includes('biến thể') || msg.includes('option'))) {
                    window.location.href = `/Products/DetailProducts/${pid}`;
                    return;
                }

                // Fallback
                window.location.href = `/Products/DetailProducts/${pid}`;
            } catch (err) {
                console.error(err);
                window.location.href = `/Products/DetailProducts/${pid}`;
            } finally {
                btn.disabled = false;
                btn.innerHTML = prevHTML;
            }
        }, false);
    })();
</script>







<script>
    document.addEventListener("DOMContentLoaded", function () {
        var els = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        els.forEach(function (el) { new bootstrap.Tooltip(el); });
    });
</script>