@model DATN_GO.ViewModels.Cart.CartSummaryViewModel
@{
    ViewData["UseContainer"] = false;
}
@{
    ViewData["Title"] = "Cart Page";
}
<style>
    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

    <h2 class="text-center mb-4 text-crimson">Giỏ Hàng Của Bạn</h2>
    <div class="row container-fluid">
        <!-- Cart Items Table -->
        <div class="col-lg-8">
            <div class="card border-crimson mb-3">
                <div class="card-header bg-crimson text-white">
                    Sản phẩm trong giỏ
                </div>
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" class="text-center">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="selectAllItems">
                                    </div>
                                </th>
                                <th scope="col" class="text-start ps-3">Sản phẩm</th>
                                <th scope="col" class="text-center">Số lượng</th>
                                <th scope="col" class="text-end">Giá</th>
                                <th scope="col" class="text-end">Tổng</th>
                            <th scope="col" class="text-center"><i class="bi bi-gear"></i></th>
                        </tr>
                        </thead>
                        <tbody id="cart-items-body">
                        @foreach (var item in Model.CartItems)
                        {
                            <tr class="cart-item-row" data-cart-id="@item.CartId" data-store-id="@item.StoreId" 
                            data-product-id="@item.ProductId"> <!-- 👈 thêm -->
                                <td class="text-center align-middle">
                                    <div class="form-check">
                                        <input class="form-check-input item-checkbox" type="checkbox"
                                               data-cart-id="@item.CartId"
                                               data-product-id="@item.ProductId"
                                               data-price="@item.Price"
                                               data-quantity="@item.Quantity"
                                               data-total="@item.Total">
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img src="@item.Image" alt="@item.ProductName" class="img-fluid rounded me-3" style="width: 60px; height: 60px; object-fit: cover;">
                                        <div>
                                            <p class="mb-1 fw-bold text-truncate-2">@item.ProductName</p>
                                            @if (item.Variants != null && item.Variants.Count > 0)
                                            {
                                                <small class="text-muted">@string.Join(" | ", item.Variants)</small>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <div class="input-group justify-content-center" style="width: 120px;">
                                        <!-- Nút Giảm -->
                                        <form asp-action="UpdateQuantity" asp-controller="Cart" method="post" class="d-inline">
                                            <input type="hidden" name="CartId" value="@item.CartId" />
                                            <input type="hidden" name="NewQuantity" value="@(item.Quantity - 1 <= 0 ? 1 : item.Quantity - 1)" />
                                            <button class="btn btn-outline-crimson btn-sm" type="submit" style="height: 35px;" @(item.Quantity <= 1 ? "disabled" : "")>-</button>
                                        </form>

                                        <!-- Input số lượng -->
                                        <input type="text" readonly class="form-control form-control-sm text-center quantity-input" value="@item.Quantity" data-max="@item.MaxQuantity" style="max-width: 50px;" />

                                        <!-- Nút Tăng -->
                                        <form asp-action="UpdateQuantity" asp-controller="Cart" method="post" class="d-inline">
                                            <input type="hidden" name="CartId" value="@item.CartId" />
                                            <input type="hidden" name="NewQuantity" value="@(item.Quantity + 1 > item.MaxQuantity ? item.MaxQuantity : item.Quantity + 1)" />
                                            <button class="btn btn-outline-crimson btn-sm" type="submit" style="height: 35px;" @(item.Quantity >= item.MaxQuantity ? "disabled" : "")>+</button>
                                        </form>
                                    </div>

                                </td>
                                <td class="text-end price" style="white-space: nowrap;">@item.Price.ToString("N0") đ</td>
                                <td class="text-end total" style="white-space: nowrap;">@item.Total.ToString("N0") đ</td>
                                <td class="text-center">
                                    <form asp-action="Remove" asp-controller="Cart" method="post">
                                        <input type="hidden" name="cartId" value="@item.CartId" />
                                        <button type="submit" class="btn btn-sm btn-link text-crimson p-0">
                                            <i class="bi bi-trash3 fs-5"></i>
                                        </button>
                                    </form>
                                </td>

                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
               
            </div>
        </div>
    <!-- Cart Summary -->
        <div class="col-lg-4">
        <div id="cart-summary-card" class="card border-crimson shadow-sm mb-3">
            <div class="card-header bg-crimson text-white">
                <strong>Tổng cộng</strong> 
            </div>
            <div class="card-body p-4">
                <div class="mb-4">
                    <label for="discountCode" class="form-label fw-semibold">Mã giảm giá</label>
                    <div class="input-group">
                        <select class="selectpicker w-100" id="voucherSelect" name="SelectedVoucherId"
                                data-live-search="true" data-width="auto" title="Chọn voucher">
                        </select>

                    </div>
                </div>
                <div class="mb-4 border-top pt-3">
                    <label class="form-label fw-semibold mb-2">Địa chỉ giao hàng</label>
                    <div>
                        <select class="form-select" id="addressSelect">
                            @foreach (var address in Model.Addresses)
                            {
                                <option value="@address.Id" title="@address.FullAddress">
                                    @address.FullAddress
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <ul class="list-group list-group-flush mb-4">
                    <input type="hidden" id="userId" value="@ViewBag.UserId" />

                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-2">
                        Tạm tính
                        <span id="subtotal">0đ</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center px-0 pb-2">
                        Phí vận chuyển
                        <span id="shipping-fee">0₫</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center px-0 pb-2">
                        Voucher giảm giá
                        <span id="voucher-discount">0</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mt-3">
                        <div>
                            <strong class="fs-5">Tổng tiền</strong>
                        </div>
                        <p>Tổng cộng: <strong id="grand-total">0₫</strong></p>
                    </li>
                </ul>
               
                <div class="mb-4 border-top pt-3">
                    <label class="form-label fw-semibold mb-3">Phương thức thanh toán</label>
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentMoMo"
                               value="momo" checked>
                        <label class="form-check-label d-flex align-items-center" for="paymentMoMo">
                            <img src="https://upload.wikimedia.org/wikipedia/vi/f/fe/MoMo_Logo.png"
                                 alt="MoMo" height="24" class="me-2">
                            <span>MoMo</span>
                        </label>
                    </div>
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentVNPay"
                               value="vnpay">
                        <label class="form-check-label d-flex align-items-center" for="paymentVNPay">
                            <img src="https://cdn-new.topcv.vn/unsafe/https://static.topcv.vn/company_logos/cong-ty-cp-giai-phap-thanh-toan-viet-nam-vnpay-6194ba1fa3d66.jpg" alt="VNPay"
                                 height="24" class="me-2">
                            <span>VNPay QR</span>
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentCOD"
                               value="cod">
                        <label class="form-check-label d-flex align-items-center" for="paymentCOD">
                            <i class="bi bi-cash-coin me-2 text-crimson fs-5"></i>
                            <span>Thanh toán khi nhận hàng (COD)</span>
                        </label>
                    </div>
                </div>
                <div class="d-grid">
                    <button type="button" id="btn-checkout" class="btn btn-crimson btn-lg fw-bold">
                        Tiến hành thanh toán
                    </button>
                </div>
            </div>
        </div>
    </div>
     
    </div>


<script>
    const API_BASE_URL = '@ViewBag.ApiBaseUrl';
    const btn = document.getElementById('btn-checkout');
    const voucherSelect = document.getElementById('voucherSelect');
    const addressSelect = document.getElementById('addressSelect');
    const toast = (msg) => alert(msg);

    btn?.addEventListener('click', async () => {
      try {
        const method = (document.querySelector('input[name="paymentMethod"]:checked')?.value || '').toLowerCase();

        const userId = Number(document.getElementById('userId')?.value || 0);
        if (!userId) return toast('Bạn cần đăng nhập.');

        const addressId = Number(addressSelect?.value || 0);
        if (!addressId) return toast('Vui lòng chọn địa chỉ giao hàng.');

        // Lấy các cart đã tick
        const selectedIds = [...document.querySelectorAll('.item-checkbox')]
          .filter(cb => cb.checked)
          .map(cb => Number(cb.dataset.cartId));
        if (selectedIds.length === 0) return toast('Vui lòng chọn ít nhất một sản phẩm.');

        // Cập nhật IsSelected trên API
        btn.disabled = true; btn.textContent = 'Đang xử lý...';
        const upRes = await fetch(`${API_BASE_URL}Cart/update-selection`, {
          method: 'PUT',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(selectedIds)
        });
        if (!upRes.ok) {
          btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
          return toast('Cập nhật lựa chọn giỏ hàng thất bại.');
        }

        if (method === 'vnpay') {
          // Tạo đơn + lấy VNPay URL
          const userVoucherId = voucherSelect?.value ? Number(voucherSelect.value) : null;
          const body = { userId, addressId, userVoucherId };

          const payRes = await fetch(`${API_BASE_URL}Payment/vnpay-create`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(body)
          });

          if (!payRes.ok) {
            btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
            const msg = await payRes.text();
            return toast('Tạo thanh toán VNPay thất bại: ' + msg);
          }

          const { paymentUrl } = await payRes.json();
          if (!paymentUrl) {
            btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
            return toast('Không lấy được paymentUrl từ server.');
          }

          // Redirect sang VNPay
          window.location.href = paymentUrl;
          return;
        }
    if (method === 'cod') {
      const userVoucherId = voucherSelect?.value ? Number(voucherSelect.value) : null;
      const body = { userId, addressId, userVoucherId };

      const payRes = await fetch(`${API_BASE_URL}Payment/cod-create`, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(body)
      });

      btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';

      if (!payRes.ok) {
        const msg = await payRes.text();
        return toast('Tạo đơn COD thất bại: ' + msg);
      }

      const { orderId, labelId } = await payRes.json();
      toast(`Đặt hàng COD thành công${labelId ? ' - Mã vận đơn: ' + labelId : ''}`);
      window.location.href = `/Checkout/Success?orderId=${orderId}`;
      return;
    }



        if (method === 'momo') {
          // TODO: sau này bạn bổ sung MoMo
          btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
          toast('MoMo chưa được tích hợp. Hãy chọn VNPay hoặc COD.');
          return;
        }


      } catch (e) {
        console.error(e);
        btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
        toast('Có lỗi xảy ra. Vui lòng thử lại.');
      }
    });
</script>


<script>
    (() => {
      // Key dành riêng cho "Mua ngay" (khác với key add-to-cart)
      const BUY_NOW_KEY = '__BUY_NOW_PIDS';

      document.addEventListener('DOMContentLoaded', () => {
        // Luôn reset "Select All"
        const selectAll = document.getElementById('selectAllItems');
        if (selectAll) selectAll.checked = false;

        // Ép tất cả checkbox về unchecked (chống trình duyệt nhớ state)
        const boxes = document.querySelectorAll('.item-checkbox');
        boxes.forEach(cb => cb.checked = false);

        // Lấy danh sách productId được "Mua ngay"
        let buyNowPids = [];
        try {
          buyNowPids = JSON.parse(localStorage.getItem(BUY_NOW_KEY) || '[]') || [];
        } catch { buyNowPids = []; }

        if (Array.isArray(buyNowPids) && buyNowPids.length) {
          // Tick đúng các item có data-product-id trùng
          buyNowPids.forEach(pid => {
            const targets =
              document.querySelectorAll(`.item-checkbox[data-product-id="${pid}"]`);
            targets.forEach(cb => {
              if (!cb.checked) {
                cb.checked = true;
                // Nếu có logic tính tiền theo 'change', dispatch event
                cb.dispatchEvent(new Event('change', { bubbles: true }));
              }
            });
          });

          // Nếu tất cả đều tick → sync selectAll
          const allChecked = [...boxes].length > 0 && [...boxes].every(x => x.checked);
          if (selectAll) selectAll.checked = allChecked;

          // Dùng xong thì clear để không tick lại lần sau
          localStorage.removeItem(BUY_NOW_KEY);
        }

        // Đồng bộ Select All <-> từng dòng
        selectAll?.addEventListener('change', (e) => {
          const checked = e.target.checked;
          document.querySelectorAll('.item-checkbox').forEach(cb => {
            cb.checked = checked;
            cb.dispatchEvent(new Event('change', { bubbles: true }));
          });
        });
        document.querySelectorAll('.item-checkbox').forEach(cb => {
          cb.addEventListener('change', () => {
            const list = Array.from(document.querySelectorAll('.item-checkbox'));
            if (selectAll) selectAll.checked = (list.length && list.every(x => x.checked));
          });
        });
      });
    })();
</script>
