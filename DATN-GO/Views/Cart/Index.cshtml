@model DATN_GO.ViewModels.Cart.CartSummaryViewModel
@{
    ViewData["UseContainer"] = false;
}
@{
    ViewData["Title"] = "Cart Page";
}
<style>
    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .load-more-btn {
        background: linear-gradient(45deg, #dc3545, #c82333);
        border: none;
        border-radius: 25px;
        padding: 12px 30px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
    }

        .load-more-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);
            background: linear-gradient(45deg, #c82333, #a71e2a);
        }

        .load-more-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
    .cart-item-row.fade-in {
        animation: fadeInUp 0.5s ease-out;
    }

    .store-group {
        margin-bottom: 1.5rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
    }

    .store-header {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-bottom: 1px solid #e0e0e0;
        padding: 15px 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .store-header:hover {
            background: linear-gradient(135deg, #e9ecef, #dee2e6);
        }

    .store-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .store-logo {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #dc3545;
    }

    .store-name {
        font-weight: 600;
        font-size: 1.1rem;
        color: #333;
        margin: 0;
    }
    .store-name-link {
        display: flex;
        align-items: center;
        gap: 15px;
        text-decoration: none;
        color: inherit;
        flex: 1;
        transition: all 0.2s ease;
    }

    .store-item-count {
        color: #666;
        font-size: 0.9rem;
    }

    .store-controls {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .store-select-all {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        color: #666;
    }

    .collapse-icon {
        transition: transform 0.3s ease;
        color: #dc3545;
    }

    .store-group.collapsed .collapse-icon {
        transform: rotate(-90deg);
    }

    .store-products {
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .store-group.collapsed .store-products {
        max-height: 0;
        padding: 0;
    }

    .store-products .table {
        margin-bottom: 0;
    }

    .store-products thead th {
        background-color: #f8f9fa;
        border-top: none;
        font-size: 0.9rem;
        padding: 12px 8px;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    #scroll-loading {
    border-top: 1px solid #dee2e6;
}
.spinner-border-sm {
    width: 1rem;
    height: 1rem;
}
.fade-in {
    animation: fadeInUp 0.5s ease-out;
}

</style>

<h2 class="text-center mb-4 text-crimson">Giỏ Hàng Của Bạn</h2>
<div class="row container-fluid">
    <div class="col-lg-8">
        <div class="card border-crimson mb-3">
            <div class="card-header bg-crimson text-white d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="selectAllItems">
                        <label class="form-check-label fw-bold" for="selectAllItems">
                            Chọn tất cả
                        </label>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                @{
                    var groupedItems = Model.CartItems.GroupBy(x => new { x.StoreId, x.StoreName }).ToList();
                    int totalItemIndex = 0;
                }

                @foreach (var storeGroup in groupedItems)
                {
                    <div class="store-group" data-store-id="@storeGroup.Key.StoreId">
                        <div class="store-header">
                            <div class="store-info">
                               
                                <a href="/Store/Detail/@storeGroup.Key.StoreId" class="store-name-link">
                                    <img src="@(string.IsNullOrEmpty(storeGroup.First().StoreAvatar) ? "/images/store-default.png" : storeGroup.First().StoreAvatar)"
                                         alt="@storeGroup.Key.StoreName"
                                         class="store-logo">
                                         <div>
                                        <h6 class="store-name">@storeGroup.Key.StoreName</h6>
                                        <small class="store-item-count">@storeGroup.Count() sản phẩm</small>
                                    </div>
                                </a>
                            </div>
                            <div class="store-controls">
                                <div class="store-select-all">
                                    <input class="form-check-input store-checkbox"
                                           type="checkbox"
                                           id="store-@storeGroup.Key.StoreId"
                                           data-store-id="@storeGroup.Key.StoreId">
                                    <label for="store-@storeGroup.Key.StoreId">Chọn tất cả</label>
                                </div>
                                <i class="bi bi-chevron-down collapse-icon fs-5"
                                   onclick="toggleStoreGroup(@storeGroup.Key.StoreId)"
                                ></i>
                            </div>
                        </div>

                        <div class="store-products">
                            <div class="table-responsive">
                                <table class="table table-hover align-middle mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th scope="col" class="text-center" style="width: 50px;"></th>
                                            <th scope="col" class="text-start ps-3">Sản phẩm</th>
                                            <th scope="col" class="text-center" style="width: 150px;">Số lượng</th>
                                            <th scope="col" class="text-end" style="width: 100px;">Giá</th>
                                            <th scope="col" class="text-end" style="width: 100px;">Tổng</th>
                                            <th scope="col" class="text-center" style="width: 80px;"><i class="bi bi-gear"></i></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in storeGroup)
                                        {
                                            <tr class="cart-item-row @(totalItemIndex >= 10 ? "d-none" : "")"
                                                data-cart-id="@item.CartId"
                                                data-store-id="@item.StoreId"
                                                data-product-id="@item.ProductId"
                                                data-item-index="@totalItemIndex">
                                                <td class="text-center align-middle">
                                                    <div class="form-check">
                                                        <input class="form-check-input item-checkbox"
                                                               type="checkbox"
                                                               data-cart-id="@item.CartId"
                                                               data-product-id="@item.ProductId"
                                                               data-store-id="@item.StoreId"
                                                               data-price="@item.Price"
                                                               data-quantity="@item.Quantity"
                                                               data-total="@item.Total">
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <a href="/Products/DetailProducts/@item.ProductId" class="text-decoration-none">
                                                            <img src="@item.Image"
                                                                 alt="@item.ProductName"
                                                                 class="img-fluid rounded me-3 product-image-hover"
                                                                 style="width: 60px; height: 60px; object-fit: cover; cursor: pointer; transition: transform 0.2s ease;">
                                                        </a>
                                                        <div class="flex-grow-1">
                                                            <a href="/Products/DetailProducts/@item.ProductId"
                                                               class="text-decoration-none text-dark product-name-link">
                                                                <p class="mb-1 fw-bold text-truncate-2 product-name-hover">@item.ProductName</p>
                                                            </a>
                                                            @if (item.Variants != null && item.Variants.Count > 0)
                                                            {
                                                                <small class="text-muted">@string.Join(" | ", item.Variants)</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="text-center">
                                                    <div class="input-group justify-content-center" style="width: 140px; margin: 0 auto;">
                                                        <button class="btn btn-outline-crimson btn-sm quantity-btn"
                                                                type="button"
                                                                data-action="decrease"
                                                                data-cart-id="@item.CartId"
                                                                data-current-qty="@item.Quantity"
                                                                data-max-qty="@item.MaxQuantity"
                                                                style="height: 35px; width: 35px;"
                                                        @(item.Quantity <= 1 ? "disabled" : "")>
                                                            <i class="bi bi-dash"></i>
                                                        </button>

                                                        <input
                                                               class="form-control form-control-sm text-center quantity-input"
                                                               value="@item.Quantity"
                                                               min="1"
                                                               max="@item.MaxQuantity"
                                                               data-cart-id="@item.CartId"
                                                               style="max-width: 70px;" />

                                                        <button class="btn btn-outline-crimson btn-sm quantity-btn"
                                                                type="button"
                                                                data-action="increase"
                                                                data-cart-id="@item.CartId"
                                                                data-current-qty="@item.Quantity"
                                                                data-max-qty="@item.MaxQuantity"
                                                                style="height: 35px; width: 35px;"
                                                        @(item.Quantity >= item.MaxQuantity ? "disabled" : "")>
                                                            <i class="bi bi-plus"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                                <td class="text-end price" style="white-space: nowrap;">@item.Price.ToString("N0") đ</td>
                                                <td class="text-end total" style="white-space: nowrap;">@item.Total.ToString("N0") đ</td>
                                                <td class="text-center">
                                                    <form asp-action="Remove" asp-controller="Cart" method="post">
                                                        <input type="hidden" name="cartId" value="@item.CartId" />
                                                        <button type="submit" class="btn btn-sm btn-link text-crimson p-0">
                                                            <i class="bi bi-trash3 fs-5"></i>
                                                        </button>
                                                    </form>
                                                </td>
                                            </tr>
                                            totalItemIndex++;
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div id="cart-summary-card" class="card border-crimson shadow-sm mb-3">
            <div class="card-header bg-crimson text-white">
                <strong>Tổng cộng</strong>
            </div>
            <div class="card-body p-4">
                <div class="mb-4">
                    <label for="discountCode" class="form-label fw-semibold">Mã giảm giá</label>
                    <div class="input-group">
                        <select class="selectpicker w-100" id="voucherSelect" name="SelectedVoucherId"
                                data-live-search="true" data-width="auto" title="Chọn voucher">
                        </select>
                    </div>
                </div>
                <div class="mb-4 border-top pt-3">
                    <label class="form-label fw-semibold mb-2">Địa chỉ giao hàng</label>
                    <a asp-controller="Address" asp-action="Address" class="me-1 small fw-medium fw-semibold">
                        <i class="bi bi-plus-circle-fill me-1"></i>
                        <span>Thêm mới</span>
                    </a>
                    <div>
                        <select class="form-select" id="addressSelect">
                            @foreach (var address in Model.Addresses)
                            {
                                <option value="@address.Id" title="@address.FullAddress">
                                    @address.FullAddress
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <ul class="list-group list-group-flush mb-4">
                    <input type="hidden" id="userId" value="@ViewBag.UserId" />

                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-2">
                        Tạm tính
                        <span id="subtotal">0đ</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center px-0 pb-2">
                        Phí vận chuyển
                        <span id="shipping-fee">0₫</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center px-0 pb-2">
                        Voucher giảm giá
                        <span id="voucher-discount">0</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mt-3">
                        <div>
                            <strong class="fs-5">Tổng tiền</strong>
                        </div>
                        <p>Tổng cộng: <strong id="grand-total">0₫</strong></p>
                    </li>
                </ul>

                <div class="mb-4 border-top pt-3">
                    <label class="form-label fw-semibold mb-3">Phương thức thanh toán</label>

                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentMoMo"
                               value="momo" checked>
                        <label class="form-check-label d-flex align-items-center" for="paymentMoMo">
                            <img src="https://upload.wikimedia.org/wikipedia/vi/f/fe/MoMo_Logo.png"
                                 alt="MoMo" height="24" class="me-2">
                            <span>MoMo</span>
                        </label>
                    </div>
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentVNPay"
                               value="vnpay">
                        <label class="form-check-label d-flex align-items-center" for="paymentVNPay">
                            <img src="https://cdn-new.topcv.vn/unsafe/https://static.topcv.vn/company_logos/cong-ty-cp-giai-phap-thanh-toan-viet-nam-vnpay-6194ba1fa3d66.jpg" alt="VNPay"
                                 height="24" class="me-2">
                            <span>VNPay QR</span>
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentCOD"
                               value="cod">
                        <label class="form-check-label d-flex align-items-center" for="paymentCOD">
                            <i class="bi bi-cash-coin me-2 text-crimson fs-5"></i>
                            <span>Thanh toán khi nhận hàng (COD)</span>
                        </label>
                    </div>
                </div>
                <div class="d-grid">
                    <button type="button" id="btn-checkout" class="btn btn-crimson btn-lg fw-bold">
                        Tiến hành thanh toán
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const API_BASE_URL = '@ViewBag.ApiBaseUrl';
    const btn = document.getElementById('btn-checkout');
    const voucherSelect = document.getElementById('voucherSelect');
    const addressSelect = document.getElementById('addressSelect');
    const toast = (msg) => alert(msg);

    // Store group toggle functionality
    function toggleStoreGroup(storeId) {
        const storeGroup = document.querySelector(`[data-store-id="${storeId}"]`);
        if (storeGroup) {
            storeGroup.classList.toggle('collapsed');
        }
    }

    btn?.addEventListener('click', async () => {
        try {
            const method = (document.querySelector('input[name="paymentMethod"]:checked')?.value || '').toLowerCase();

            const userId = Number(document.getElementById('userId')?.value || 0);
            if (!userId) return toast('Bạn cần đăng nhập.');

            const addressId = Number(addressSelect?.value || 0);
            if (!addressId) return toast('Vui lòng chọn địa chỉ giao hàng.');

            const selectedIds = [...document.querySelectorAll('.item-checkbox')]
                .filter(cb => cb.checked)
                .map(cb => Number(cb.dataset.cartId));
            if (selectedIds.length === 0) return toast('Vui lòng chọn ít nhất một sản phẩm.');

            btn.disabled = true; btn.textContent = 'Đang xử lý...';
            const upRes = await fetch(`${API_BASE_URL}Cart/update-selection`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(selectedIds)
            });
            if (!upRes.ok) {
                btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
                return toast('Cập nhật lựa chọn giỏ hàng thất bại.');
            }

            if (method === 'vnpay') {
                const userVoucherId = voucherSelect?.value ? Number(voucherSelect.value) : null;
                const body = { userId, addressId, userVoucherId };

                const payRes = await fetch(`${API_BASE_URL}Payment/vnpay-create`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });

                if (!payRes.ok) {
                    btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
                    const msg = await payRes.text();
                    return toast('Tạo thanh toán VNPay thất bại: ' + msg);
                }

                const { paymentUrl } = await payRes.json();
                if (!paymentUrl) {
                    btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
                    return toast('Không lấy được paymentUrl từ server.');
                }

                window.location.href = paymentUrl;
                return;
            }

            if (method === 'cod') {
                const userVoucherId = voucherSelect?.value ? Number(voucherSelect.value) : null;
                const body = { userId, addressId, userVoucherId };

                const payRes = await fetch(`${API_BASE_URL}Payment/cod-create`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });

                btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';

                if (!payRes.ok) {
                    const msg = await payRes.text();
                    return toast('Tạo đơn COD thất bại: ' + msg);
                }

                const { orderId, labelId } = await payRes.json();
                toast(`Đặt hàng COD thành công${labelId ? ' - Mã vận đơn: ' + labelId : ''}`);
                window.location.href = `/Checkout/Success?orderId=${orderId}`;
                return;
            }

            if (method === 'momo') {
                const userVoucherId = voucherSelect?.value ? Number(voucherSelect.value) : null;
                const body = { userId, addressId, userVoucherId };

                const payRes = await fetch(`${API_BASE_URL}Payment/momo-create`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });

                btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';

                if (!payRes.ok) {
                    const msg = await payRes.text();
                    return toast('Tạo thanh toán MoMo thất bại: ' + msg);
                }

                const { payUrl } = await payRes.json();
                if (!payUrl) return toast('Không nhận được payUrl từ server.');

                window.location.href = payUrl;
                return;
            }

        } catch (e) {
            console.error(e);
            btn.disabled = false; btn.textContent = 'Tiến hành thanh toán';
            toast('Có lỗi xảy ra. Vui lòng thử lại.');
        }
    });
</script>

<script>
    (function () {
        const STORAGE_KEY = 'cart_checkbox_states';
        const BUY_NOW_KEY = '__BUY_NOW_PIDS';

        function saveStates() {
            try {
                const data = {
                    timestamp: Date.now(),
                    selectAll: document.getElementById('selectAllItems')?.checked || false,
                    items: [],
                    stores: []
                };

                document.querySelectorAll('.item-checkbox').forEach(cb => {
                    data.items.push({
                        cartId: cb.dataset.cartId,
                        checked: cb.checked
                    });
                });

                document.querySelectorAll('.store-checkbox').forEach(cb => {
                    data.stores.push({
                        storeId: cb.dataset.storeId,
                        checked: cb.checked
                    });
                });

                localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
                console.log('✅ Đã lưu:', data.items.filter(x => x.checked).length + ' sản phẩm được chọn');

            } catch (e) {
                console.error('❌ Lỗi lưu trạng thái:', e);
            }
        }

        function restoreStates() {
            try {
                const saved = localStorage.getItem(STORAGE_KEY);
                if (!saved) return false;

                const data = JSON.parse(saved);

                if (Date.now() - data.timestamp > 3600000) {
                    localStorage.removeItem(STORAGE_KEY);
                    return false;
                }

                let restored = 0;

                if (data.items) {
                    data.items.forEach(item => {
                        const cb = document.querySelector(`.item-checkbox[data-cart-id="${item.cartId}"]`);
                        if (cb && item.checked) {
                            cb.checked = true;
                            restored++;
                        }
                    });
                }

                if (data.stores) {
                    data.stores.forEach(store => {
                        const cb = document.querySelector(`.store-checkbox[data-store-id="${store.storeId}"]`);
                        if (cb) {
                            cb.checked = store.checked;
                        }
                    });
                }

                const selectAllCb = document.getElementById('selectAllItems');
                if (selectAllCb) {
                    selectAllCb.checked = data.selectAll;
                }

                console.log('✅ Khôi phục:', restored + ' sản phẩm');

                // Trigger update tổng tiền
                setTimeout(() => {
                    document.querySelectorAll('.item-checkbox:checked').forEach(cb => {
                        cb.dispatchEvent(new Event('change', { bubbles: true }));
                    });
                }, 100);

                return restored > 0;

            } catch (e) {
                console.error('❌ Lỗi khôi phục:', e);
                localStorage.removeItem(STORAGE_KEY);
                return false;
            }
        }

        function handleBuyNow() {
            try {
                const pids = JSON.parse(localStorage.getItem(BUY_NOW_KEY) || '[]');
                if (!Array.isArray(pids) || !pids.length) return false;

                let found = 0;
                pids.forEach(pid => {
                    document.querySelectorAll(`.item-checkbox[data-product-id="${pid}"]`).forEach(cb => {
                        cb.checked = true;
                        found++;
                    });
                });

                if (found > 0) {
                    updateAllStates();
                    console.log('✅ Buy now:', found + ' sản phẩm');
                }

                localStorage.removeItem(BUY_NOW_KEY);
                return found > 0;

            } catch (e) {
                console.error('❌ Lỗi buy now:', e);
                return false;
            }
        }

        function updateAllStates() {
            document.querySelectorAll('.store-checkbox').forEach(storeCb => {
                const storeId = storeCb.dataset.storeId;
                const storeItems = document.querySelectorAll(`.item-checkbox[data-store-id="${storeId}"]`);
                if (storeItems.length > 0) {
                    storeCb.checked = Array.from(storeItems).every(cb => cb.checked);
                }
            });

            const selectAll = document.getElementById('selectAllItems');
            const allItems = document.querySelectorAll('.item-checkbox');
            if (selectAll && allItems.length > 0) {
                selectAll.checked = Array.from(allItems).every(cb => cb.checked);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            console.log('🔄 Khởi tạo cart checkbox manager...');

            // Reset tất cả checkbox
            document.getElementById('selectAllItems')?.setAttribute('checked', false);
            document.querySelectorAll('.item-checkbox').forEach(cb => cb.checked = false);
            document.querySelectorAll('.store-checkbox').forEach(cb => cb.checked = false);

            // Delay một chút để đảm bảo DOM ready
            setTimeout(() => {
                const hasBuyNow = handleBuyNow();
                if (!hasBuyNow) {
                    restoreStates();
                }

                setupEventListeners();
            }, 200);
        });

        function setupEventListeners() {
            // Checkbox sản phẩm
            document.querySelectorAll('.item-checkbox').forEach(cb => {
                cb.addEventListener('change', function () {
                    updateAllStates();
                    saveStates();
                });
            });

            // Checkbox cửa hàng
            document.querySelectorAll('.store-checkbox').forEach(cb => {
                cb.addEventListener('change', function (e) {
                    e.stopPropagation();
                    const storeId = this.dataset.storeId;
                    const checked = this.checked;

                    document.querySelectorAll(`.item-checkbox[data-store-id="${storeId}"]`).forEach(itemCb => {
                        itemCb.checked = checked;
                        itemCb.dispatchEvent(new Event('change'));
                    });
                });
            });

            // Checkbox chọn tất cả
            const selectAll = document.getElementById('selectAllItems');
            if (selectAll) {
                selectAll.addEventListener('change', function () {
                    const checked = this.checked;
                    document.querySelectorAll('.item-checkbox').forEach(cb => {
                        cb.checked = checked;
                        cb.dispatchEvent(new Event('change'));
                    });
                });
            }

            console.log('✅ Đã setup event listeners');
        }

        window.addEventListener('beforeunload', saveStates);

        document.addEventListener('submit', saveStates);

        window.saveCartStates = saveStates;
        window.clearCartStates = function () {
            localStorage.removeItem(STORAGE_KEY);
            console.log('🗑️ Đã xóa trạng thái lưu');
        };

    })();
</script>

<script>
    (() => {
      const BUY_NOW_KEY = '__BUY_NOW_PIDS';

      document.addEventListener('DOMContentLoaded', () => {
        const selectAll = document.getElementById('selectAllItems');
        if (selectAll) selectAll.checked = false;

        const boxes = document.querySelectorAll('.item-checkbox');
        boxes.forEach(cb => cb.checked = false);

        let buyNowPids = [];
        try {
          buyNowPids = JSON.parse(localStorage.getItem(BUY_NOW_KEY) || '[]') || [];
        } catch { buyNowPids = []; }

        if (Array.isArray(buyNowPids) && buyNowPids.length) {
          buyNowPids.forEach(pid => {
            const targets =
              document.querySelectorAll(`.item-checkbox[data-product-id="${pid}"]`);
            targets.forEach(cb => {
              if (!cb.checked) {
                cb.checked = true;
                cb.dispatchEvent(new Event('change', { bubbles: true }));
              }
            });
          });

          const allChecked = [...boxes].length > 0 && [...boxes].every(x => x.checked);
          if (selectAll) selectAll.checked = allChecked;

          localStorage.removeItem(BUY_NOW_KEY);
        }

        selectAll?.addEventListener('change', (e) => {
          const checked = e.target.checked;
          document.querySelectorAll('.item-checkbox').forEach(cb => {
            cb.checked = checked;
            cb.dispatchEvent(new Event('change', { bubbles: true }));
          });
        });
        document.querySelectorAll('.item-checkbox').forEach(cb => {
          cb.addEventListener('change', () => {
            const list = Array.from(document.querySelectorAll('.item-checkbox'));
            if (selectAll) selectAll.checked = (list.length && list.every(x => x.checked));
          });
        });
      });
    })();
</script>
<script>
    // Thay thế script pagination hiện tại bằng code này
    document.addEventListener('DOMContentLoaded', function () {
        let isLoading = false;
        let hasMoreItems = true;

        // Khởi tạo: Kiểm tra và setup pagination
        function initializePagination() {
            const allItems = document.querySelectorAll('.cart-item-row');
            console.log(`Total items found: ${allItems.length}`); // Debug log

            // Đảm bảo chỉ hiển thị 10 items đầu tiên
            allItems.forEach((item, index) => {
                if (index >= 10) {
                    item.classList.add('d-none');
                } else {
                    item.classList.remove('d-none');
                }
            });

            updateCounts();
            checkIfHasMore();

            // Thêm pagination info nếu có nhiều hơn 10 items
            if (allItems.length > 10) {
                addPaginationInfo();
            }
        }

        // Thêm thông tin pagination
        function addPaginationInfo() {
            // Xóa pagination info cũ nếu có
            const oldInfo = document.querySelector('.pagination-info');
            if (oldInfo) {
                oldInfo.remove();
            }

            const paginationInfo = document.createElement('div');
            paginationInfo.className = 'pagination-info';
           

            // Thêm vào cuối card body
            const cardBody = document.querySelector('.card-body');
            if (cardBody) {
                cardBody.appendChild(paginationInfo);
            }
        }

        // Cập nhật số lượng hiển thị
        function updateCounts() {
            const totalItems = document.querySelectorAll('.cart-item-row').length;
            const visibleItems = document.querySelectorAll('.cart-item-row:not(.d-none)').length;

            const showingElement = document.getElementById('showing-count');
            const totalElement = document.getElementById('total-count');

            if (showingElement) showingElement.textContent = visibleItems;
            if (totalElement) totalElement.textContent = totalItems;

            console.log(`Showing: ${visibleItems}/${totalItems}`); // Debug log
        }

        // Kiểm tra còn items để load không
        function checkIfHasMore() {
            const totalItems = document.querySelectorAll('.cart-item-row').length;
            const visibleItems = document.querySelectorAll('.cart-item-row:not(.d-none)').length;
            hasMoreItems = visibleItems < totalItems;

            console.log(`Has more items: ${hasMoreItems}`); // Debug log

            if (!hasMoreItems) {
                toggleLoadingIndicator(false);
                updatePaginationComplete();
            }
        }

        function toggleLoadingIndicator(show) {
            let loadingDiv = document.getElementById('scroll-loading');

            if (show && !loadingDiv && hasMoreItems) {
                loadingDiv = document.createElement('div');
                loadingDiv.id = 'scroll-loading';
                loadingDiv.className = 'text-center py-3 bg-light border-top';
                const cardBody = document.querySelector('.card-body');
                if (cardBody) {
                    cardBody.appendChild(loadingDiv);
                }
            }

            if (loadingDiv) {
                loadingDiv.style.display = show ? 'block' : 'none';
            }
        }

        function loadMoreItems() {
            if (isLoading || !hasMoreItems) {
                console.log(`Cannot load more. Loading: ${isLoading}, HasMore: ${hasMoreItems}`); // Debug log
                return;
            }

            console.log('Loading more items...'); // Debug log
            isLoading = true;
            toggleLoadingIndicator(true);

            setTimeout(() => {
                const hiddenItems = document.querySelectorAll('.cart-item-row.d-none');
                const itemsToShow = Math.min(10, hiddenItems.length);

                console.log(`Hidden items found: ${hiddenItems.length}, showing: ${itemsToShow}`); // Debug log

                for (let i = 0; i < itemsToShow; i++) {
                    hiddenItems[i].classList.remove('d-none');
                    hiddenItems[i].classList.add('fade-in');
                    setTimeout(() => {
                        hiddenItems[i].classList.remove('fade-in');
                    }, 500);
                }

                updateCounts();
                checkIfHasMore();
                isLoading = false;
                toggleLoadingIndicator(false);

            }, 500); 
        }

        function handleScroll() {
            if (isLoading || !hasMoreItems) return;

            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight;
            const distanceToBottom = documentHeight - (scrollTop + windowHeight);

            const cartCard = document.querySelector('.card.border-crimson');
            if (cartCard) {
                const cardRect = cartCard.getBoundingClientRect();
                const isNearCardBottom = cardRect.bottom <= windowHeight + 300; // Trigger 300px before

                if (isNearCardBottom || distanceToBottom <= 200) {
                    console.log('Scroll trigger activated'); // Debug log
                    loadMoreItems();
                }
            } else if (distanceToBottom <= 200) {
                console.log('Document scroll trigger activated'); // Debug log
                loadMoreItems();
            }
        }

        function throttle(func, limit) {
            let inThrottle;
            return function () {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }
        initializePagination();

        const throttledScroll = throttle(handleScroll, 100);
        window.addEventListener('scroll', throttledScroll);

        window.addEventListener('resize', throttle(handleScroll, 200));
        window.addEventListener('beforeunload', () => {
        window.removeEventListener('scroll', throttledScroll);
        });

        const oldLoadMoreBtn = document.getElementById('load-more-btn');
        if (oldLoadMoreBtn) {
            const buttonContainer = oldLoadMoreBtn.closest('.text-center');
            if (buttonContainer) {
                buttonContainer.remove();
            }
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        document.addEventListener('click', function (e) {
            if (e.target.closest('.quantity-btn')) {
                e.preventDefault();

                const button = e.target.closest('.quantity-btn');
                const action = button.dataset.action;
                const cartId = button.dataset.cartId;
                const maxQty = parseInt(button.dataset.maxQty);

                const row = button.closest('tr');
                const quantityInput = row.querySelector('.quantity-input');
                let currentQty = parseInt(quantityInput.value);

                let newQty = currentQty;
                if (action === 'increase' && currentQty < maxQty) {
                    newQty = currentQty + 1;
                } else if (action === 'decrease' && currentQty > 1) {
                    newQty = currentQty - 1;
                }

                if (newQty !== currentQty) {
                    updateQuantityAjax(cartId, newQty, row);
                }
            }
        });

        let inputTimer;
        document.addEventListener('input', function (e) {
            if (e.target.classList.contains('quantity-input')) {
                const input = e.target;
                const cartId = input.dataset.cartId;
                let newQty = parseInt(input.value);
                const maxQty = parseInt(input.getAttribute('max'));
                const minQty = parseInt(input.getAttribute('min'));

                if (newQty < minQty || isNaN(newQty)) {
                    newQty = minQty;
                    input.value = minQty;
                }
                if (newQty > maxQty) {
                    newQty = maxQty;
                    input.value = maxQty;
                }
                clearTimeout(inputTimer);
                inputTimer = setTimeout(() => {
                    const row = input.closest('tr');
                    updateQuantityAjax(cartId, newQty, row);
                }, 800);
            }
        });

        async function updateQuantityAjax(cartId, newQuantity, row) {
            const quantityInput = row.querySelector('.quantity-input');
            const buttons = row.querySelectorAll('.quantity-btn');
            const originalValue = quantityInput.value;
            quantityInput.disabled = true;
            buttons.forEach(btn => btn.disabled = true);

            try {
                const response = await fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        CartId: parseInt(cartId),
                        NewQuantity: newQuantity
                    })
                });

                if (response.ok) {
                    const result = await response.json();

                    quantityInput.value = newQuantity;
                    const priceText = row.querySelector('.price').textContent;
                    const price = parseFloat(priceText.replace(/[^\d]/g, ''));
                    const newTotal = price * newQuantity;
                    row.querySelector('.total').textContent = newTotal.toLocaleString('vi-VN') + ' đ';

                    buttons.forEach(btn => {
                        btn.dataset.currentQty = newQuantity;
                    });

                    const checkbox = row.querySelector('.item-checkbox');
                    if (checkbox) {
                        checkbox.dataset.quantity = newQuantity;
                        checkbox.dataset.total = newTotal;
                    }

                    if (checkbox && checkbox.checked) {
                        updateCartSummary();
                    }

                } else {
                    quantityInput.value = originalValue;
                }

            } catch (error) {
                console.error('Error:', error);
                quantityInput.value = originalValue;
            } finally {
                quantityInput.disabled = false;

                const currentQty = parseInt(quantityInput.value);
                const maxQty = parseInt(quantityInput.getAttribute('max'));

                buttons.forEach(btn => {
                    const action = btn.dataset.action;

                    if (action === 'decrease') {
                        btn.disabled = currentQty <= 1;
                    } else if (action === 'increase') {
                        btn.disabled = currentQty >= maxQty;
                    }

                    btn.dataset.currentQty = currentQty;
                });
            }
        }

         function updateCartSummary() {
            let subtotal = 0;
            document.querySelectorAll('.item-checkbox:checked').forEach(cb => {
                const total = parseFloat(cb.dataset.total || 0);
                subtotal += total;
            });

            const subtotalElement = document.getElementById('subtotal');
            if (subtotalElement) {
                subtotalElement.textContent = subtotal.toLocaleString('vi-VN') + 'đ';
            }

            recalculateShippingFee(); // DÒNG MỚI - thay thế updateShippingAndTotal()
        }

        function updateShippingAndTotal() {
            const addressSelect = document.getElementById('addressSelect');
            const addressId = addressSelect?.value;

            if (addressId) {
                console.log('Updating shipping fee for address:', addressId);
            }

            const subtotalText = document.getElementById('subtotal')?.textContent || '0đ';
            const shippingText = document.getElementById('shipping-fee')?.textContent || '0₫';
            const discountText = document.getElementById('voucher-discount')?.textContent || '0';

            const subtotal = parseFloat(subtotalText.replace(/[^\d]/g, '')) || 0;
            const shipping = parseFloat(shippingText.replace(/[^\d]/g, '')) || 0;
            const discount = parseFloat(discountText.replace(/[^\d]/g, '')) || 0;

            const grandTotal = subtotal + shipping - discount;
            const grandTotalElement = document.getElementById('grand-total');

            if (grandTotalElement) {
                grandTotalElement.textContent = grandTotal.toLocaleString('vi-VN') + '₫';
            }
        }
    });
</script>
<script>
    // === THÊM MỚI: Hàm tính lại phí vận chuyển ===
    async function recalculateShippingFee() {
        const addressSelect = document.getElementById('addressSelect');
        const addressId = addressSelect?.value;
        const userId = document.getElementById('userId')?.value;

        if (!addressId || !userId) {
            console.log('Thiếu addressId hoặc userId để tính phí vận chuyển');
            return;
        }

        try {
            const response = await fetch(`${API_BASE_URL}Cart/shipping-groups`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    UserId: parseInt(userId),
                    AddressId: parseInt(addressId)
                })
            });

            if (response.ok) {
                const shippingData = await response.json();

                // Tính tổng phí vận chuyển từ tất cả nhóm
                let totalShipping = 0;
                if (shippingData && Array.isArray(shippingData)) {
                    totalShipping = shippingData.reduce((sum, group) => sum + (group.shippingFee || 0), 0);
                }

                // Cập nhật hiển thị phí vận chuyển
                const shippingFeeElement = document.getElementById('shipping-fee');
                if (shippingFeeElement) {
                    shippingFeeElement.textContent = totalShipping.toLocaleString('vi-VN') + '₫';
                }

                // Cập nhật tổng tiền sau khi phí vận chuyển thay đổi
                updateGrandTotal();

            } else {
                console.error('Không thể lấy thông tin vận chuyển:', response.status);
            }
        } catch (error) {
            console.error('Lỗi khi tính phí vận chuyển:', error);
        }
    }

    // === THÊM MỚI: Hàm cập nhật tổng tiền ===
    function updateGrandTotal() {
        const subtotalText = document.getElementById('subtotal')?.textContent || '0đ';
        const shippingText = document.getElementById('shipping-fee')?.textContent || '0₫';
        const discountText = document.getElementById('voucher-discount')?.textContent || '0';

        const subtotal = parseFloat(subtotalText.replace(/[^\d]/g, '')) || 0;
        const shipping = parseFloat(shippingText.replace(/[^\d]/g, '')) || 0;
        const discount = parseFloat(discountText.replace(/[^\d]/g, '')) || 0;

        const grandTotal = subtotal + shipping - discount;
        const grandTotalElement = document.getElementById('grand-total');

        if (grandTotalElement) {
            grandTotalElement.textContent = grandTotal.toLocaleString('vi-VN') + '₫';
        }
    }

    // === THÊM MỚI: Event listener cho thay đổi địa chỉ ===
    document.getElementById('addressSelect')?.addEventListener('change', function () {
        console.log('Địa chỉ thay đổi, đang tính lại phí vận chuyển...');
        recalculateShippingFee();
    });
</script>