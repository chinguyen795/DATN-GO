﻿@using DATN_GO.ViewModels
@model StoreProfileViewModel

@{
    Layout = "~/Areas/Seller/Views/Shared/_LayoutSeller.cshtml";
    var errors = TempData["BasicInfoErrors"] as Dictionary<string, string>;
    var paymentErrors = TempData["PaymentInfoErrors"] as Dictionary<string, string>;
}

<div class="page-wrapper">
    <header class="main-header" id="header">
        <nav class="navbar navbar-expand-lg navbar-light" id="navbar">

            <!-- Sidebar toggle button -->
            <button id="sidebar-toggler" class="sidebar-toggle">
                <span class="sr-only">Toggle navigation</span>
            </button>

            <span class="page-title">TRANG CHỦ</span>

            <div class="navbar-right">
                <ul class="nav navbar-nav">

                    <!-- Thông báo -->
                    <li class="custom-dropdown">
                        <a asp-area="Seller" asp-controller="Notification" asp-action="Notification" class="notify-toggler custom-dropdown-toggler">
                            <i class="mdi mdi-bell-outline icon"></i>
                        </a>
                    </li>

                    <!-- User Account -->
                    <li class="dropdown user-menu">
                        <button class="dropdown-toggle nav-link" data-toggle="dropdown">

                            <img src="@(string.IsNullOrEmpty(Model.UserAvatar) ? Url.Content("~/images/avt-user.jpg") : Model.UserAvatar)"
                                 alt="User Profile" width="32" height="32" style="object-fit: cover;" loading="lazy">

                            <span class="d-none d-lg-inline-block">@Model.FullName</span>
                        </button>

                        <ul class="dropdown-menu dropdown-menu-right">
                            <li>
                                <a class="dropdown-link-item" asp-controller="Profile" asp-action="Index" asp-area="">
                                    <i class="mdi mdi-account-outline"></i>
                                    <span class="nav-text">Hồ Sơ</span>
                                </a>
                            </li>
                            <li class="dropdown-footer">
                                <a class="dropdown-link-item" href="/Admin/Decorates/Logout">
                                    <i class="mdi mdi-logout"></i> Đăng Xuất
                                </a>
                            </li>
                        </ul>
                    </li>

                </ul>
            </div>
        </nav>
    </header>
    <div style="position: fixed; top: 20px; right: 20px; z-index: 2000; width: 360px;">
        @if (TempData["Success"] != null)
        {
            <div id="autoAlert" class="alert alert-success alert-dismissible fade show shadow" role="alert">
                <i class="bi bi-check-circle-fill me-2"></i>
                @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div id="autoAlert" class="alert alert-danger alert-dismissible fade show shadow" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>
            </div>
        }
    </div>
    <div class="content-wrapper">
        <div class="content">
            <div class="card card-default card-profile">
                <div class="card-header-bg position-relative" id="coverContainer"
                     style="background-image:url('@Model.CoverImage'); background-size: cover; background-position: center; height: 250px;">
                    <!-- Avatar đặt trong đây để nó nằm chồng lên cover -->
                    <div class="position-absolute" style="bottom: -60px; left: 50%; transform: translateX(-50%);">
                        <img class="rounded-circle" src="@Model.Avatar" alt="User Profile"
                             id="profileImage" width="120" height="120"
                             style="object-fit: cover; border: 4px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    </div>
                </div>

                <div class="card-body card-profile-body text-center" style="margin-top: 60px;display:block">
                    <span class="h5 d-block mt-3 mb-2">@Model.StoreName</span>
                    <span class="d-block">@Model.Email</span>

                    <input type="file" id="profilePicInput" class="d-none" accept="image/*" onchange="previewProfileImage(event)">
                    <button onclick="document.getElementById('profilePicInput').click()" class="btn btn-danger btn-sm mt-2">
                        Đổi ảnh đại diện
                    </button>

                    <input type="file" id="coverPicInput" class="d-none" accept="image/*" onchange="previewCoverImage(event)">
                    <button onclick="document.getElementById('coverPicInput').click()" class="btn btn-danger btn-sm mt-2">
                        Đổi ảnh nền
                    </button>

                    <button id="saveImageBtn" class="btn btn-success btn-sm mt-2 d-none" onclick="uploadImages()">
                        Lưu thay đổi
                    </button>
                </div>
            </div>


            <div class="row">
                <div class="col-lg-6">
                    <div class="card card-default" style="min-height: 400px;">
                        <div class="card-header d-flex align-items-center">
                            <h2>Thông tin cơ bản</h2>
                            <button class="btn btn-danger btn-pill ml-auto" data-toggle="modal" data-target="#editBasicInfoModal">Sửa thông tin</button>
                        </div>
                        <div class="card-body">
                            <p class="text-dark font-weight-bold">Người đại diện:</p>
                            <p>@Model.FullName</p>

                            <p class="text-dark font-weight-bold">Địa chỉ Email:</p>
                            <p>@Model.Email</p>

                            <p class="text-dark font-weight-bold">Số điện thoại:</p>
                            <p>@Model.Phone</p>

                            <p class="text-dark font-weight-bold">Địa chỉ lấy hàng:</p>
                            <p>@Model.PickupAddress</p>

                            <p class="text-dark font-weight-bold">Phường/Xã:</p>
                            <p>@Model.Ward</p>

                            <p class="text-dark font-weight-bold">Quận/Huyện:</p>
                            <p>@Model.District</p>

                            <p class="text-dark font-weight-bold">Tỉnh/Thành phố:</p>
                            <p>@Model.Province</p>

                            <p class="text-dark font-weight-bold">Ngày tạo:</p>
                            <p>
                                @(Model.CreateAt.HasValue
                                    ? Model.CreateAt.Value.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")
                                    : "Chưa có dữ liệu")
                            </p>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="card card-default" style="min-height: 400px;">
                        <div class="card-header d-flex align-items-center">
                            <h2>Thông tin thanh toán</h2>
                            <button class="btn btn-danger btn-pill ml-auto" data-toggle="modal" data-target="#editPaymentInfoModal">Sửa thông tin</button>
                        </div>
                        <div class="card-body">
                            <p class="text-dark font-weight-bold">Ngân hàng:</p>
                            <p>@Model.Bank</p>

                            <p class="text-dark font-weight-bold">Số tài khoản:</p>
                            <p>@Model.BankAccount</p>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<!-- Modal Sửa Thông Tin Cơ Bản -->
<form asp-action="UpdateBasicInfo" asp-controller="Home" asp-area="Seller" method="post">
    <div class="modal fade" id="editBasicInfoModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger">
                    <h5 class="modal-title text-white">Sửa Thông Tin Cơ Bản</h5>
                    <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label>Tên cửa hàng</label>
                        <input type="text" class="form-control" name="StoreName" id="storeName" value="@Model.StoreName">
                    </div>

                    <div class="form-group">
                        <label>Người đại diện</label>
                        <input type="text" class="form-control" name="FullName" id="fullName" value="@Model.FullName" readonly>
                    </div>

                    <div class="form-group">
                        <label>Địa chỉ Email</label>
                        <input type="email" class="form-control" name="Email" id="email" value="@Model.Email" readonly>
                    </div>

                    <div class="form-group">
                        <label>Số điện thoại</label>
                        <input type="text" class="form-control" name="Phone" id="phone" value="@Model.Phone">
                    </div>

                    <!-- Địa chỉ -->
                    <div class="form-group">
                        <label>Địa chỉ lấy hàng</label>
                        <input type="text" class="form-control" name="PickupAddress" id="pickupAddress" value="@Model.PickupAddress">
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label>Tỉnh/Thành phố</label>
                            <select class="form-control" id="provinceSelect" name="Province">
                                <option value="">-- Chọn Tỉnh/Thành phố --</option>
                            </select>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Quận/Huyện</label>
                            <select class="form-control" id="districtSelect" name="District">
                                <option value="">-- Chọn Quận/Huyện --</option>
                            </select>
                        </div>
                        <div class="form-group col-md-4">
                            <label>Phường/Xã</label>
                            <select class="form-control" id="wardSelect" name="Ward">
                                <option value="">-- Chọn Phường/Xã --</option>
                            </select>
                        </div>
                    </div>

                    <!-- Pre-fill từ server -->
                    <input type="hidden" id="preProvince" value="@Model.Province" />
                    <input type="hidden" id="preDistrict" value="@Model.District" />
                    <input type="hidden" id="preWard" value="@Model.Ward" />


                    <!-- End thay đổi -->
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-dismiss="modal">Đóng</button>
                    <button type="submit" class="btn btn-danger">Lưu thay đổi</button>
                </div>
            </div>
        </div>
    </div>
</form>



<form asp-action="UpdatePaymentInfo" asp-controller="Home" asp-area="Seller" method="post">
    <div class="modal fade" id="editPaymentInfoModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger">
                    <h5 class="modal-title text-white">Sửa Thông Tin Thanh Toán</h5>
                    <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Ngân hàng</label>
                        <select class="form-control" name="Bank" id="bank">
                            <option value="">-- Chọn ngân hàng --</option>
                            @foreach (var bank in ViewBag.BankList)
                            {
                                <option value="@bank.Value" selected="@(Model.Bank == bank.Value ? "selected" : null)">@bank.Text</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Số tài khoản</label>
                        <input type="text" class="form-control" name="BankAccount" id="bankAccount" value="@Model.BankAccount">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-dismiss="modal">Đóng</button>
                    <button type="submit" class="btn btn-danger">Lưu thay đổi</button>
                </div>
            </div>
        </div>
    </div>
</form>


<script>
    (function () {
      const provinceSelect = document.getElementById('provinceSelect');
      const districtSelect = document.getElementById('districtSelect');
      const wardSelect = document.getElementById('wardSelect');

      if (!provinceSelect || !districtSelect || !wardSelect) return;

      let LOCATIONS = [];

      const preProvince = document.getElementById('preProvince').value;
      const preDistrict = document.getElementById('preDistrict').value;
      const preWard = document.getElementById('preWard').value;

      function clearSelect(sel, placeholder) {
        sel.innerHTML = '';
        const opt = document.createElement('option');
        opt.value = '';
        opt.textContent = placeholder || '-- Chọn --';
        sel.appendChild(opt);
      }

      function fillSelect(sel, items, textKey, selectedValue = '') {
        items.forEach(item => {
          const text = typeof item === 'string' ? item : item[textKey];
          const opt = document.createElement('option');
          opt.value = text;
          opt.textContent = text;
          if (text === selectedValue) opt.selected = true;
          sel.appendChild(opt);
        });
      }

      function findCityByName(name) {
        return LOCATIONS.find(c => c.CityName === name);
      }

      function findDistrictByName(city, name) {
        return (city?.Districts || []).find(d => d.DistrictName === name);
      }

      async function initLocations() {
        try {
          const res = await fetch('/data/locations.json', { cache: 'no-store' });
          if (!res.ok) throw new Error('Failed to load locations.json');
          LOCATIONS = await res.json();

          // Province
          clearSelect(provinceSelect, '-- Chọn Tỉnh/Thành phố --');
          fillSelect(provinceSelect, LOCATIONS, 'CityName', preProvince);

          // District
          clearSelect(districtSelect, '-- Chọn Quận/Huyện --');
          if (preProvince) {
            const city = findCityByName(preProvince);
            if (city) {
              fillSelect(districtSelect, city.Districts, 'DistrictName', preDistrict);
            }
          }

          // Ward
          clearSelect(wardSelect, '-- Chọn Phường/Xã --');
          if (preDistrict) {
            const city = findCityByName(preProvince);
            const district = findDistrictByName(city, preDistrict);
            if (district) {
              fillSelect(wardSelect, district.Wards, 'WardName', preWard);
            }
          }
        } catch (err) {
          console.error('[locations] load error:', err);
        }
      }

      provinceSelect.addEventListener('change', () => {
        const city = findCityByName(provinceSelect.value);
        clearSelect(districtSelect, '-- Chọn Quận/Huyện --');
        clearSelect(wardSelect, '-- Chọn Phường/Xã --');
        if (!city) return;
        fillSelect(districtSelect, city.Districts, 'DistrictName');
      });

      districtSelect.addEventListener('change', () => {
        const city = findCityByName(provinceSelect.value);
        const district = findDistrictByName(city, districtSelect.value);
        clearSelect(wardSelect, '-- Chọn Phường/Xã --');
        if (!district) return;
        fillSelect(wardSelect, district.Wards, 'WardName');
      });

      document.addEventListener('DOMContentLoaded', initLocations);
    })();
</script>



<script>
    function changeProfileImage(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('profileImage').src = e.target.result;
                uploadImage(e.target.result, true);
            };
            reader.readAsDataURL(file);
        }
    }

    function changeCoverImage(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('coverImage').style.backgroundImage = `url(${e.target.result})`;
                uploadImage(e.target.result, false);
            };
            reader.readAsDataURL(file);
        }
    }
    let selectedAvatar = null;
    let selectedCover = null;

    function previewProfileImage(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = e => {
                document.getElementById('profileImage').src = e.target.result;
                selectedAvatar = file;
                document.getElementById('saveImageBtn').classList.remove('d-none');
            };
            reader.readAsDataURL(file);
        }
    }

    function previewCoverImage(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = e => {
                document.getElementById('coverContainer').style.backgroundImage = `url(${e.target.result})`;
                selectedCover = file;
                document.getElementById('saveImageBtn').classList.remove('d-none');
            };
            reader.readAsDataURL(file);
        }
    }

    function uploadImages() {
        const formData = new FormData();
        if (selectedAvatar) formData.append('avatarFile', selectedAvatar);
        if (selectedCover) formData.append('coverFile', selectedCover);

        $.ajax({
            url: '/Seller/Home/UpdateImages',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: () => location.reload(),
            error: () => alert('Lỗi khi cập nhật hình ảnh!')
        });
    }


    function uploadImage(base64Data, isAvatar) {
        $.ajax({
            url: '/Seller/Stores/Image',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify({ IsAvatar: isAvatar, Data: base64Data }),
            success: () => alert('Cập nhật ảnh thành công!'),
            error: () => alert('Lỗi khi cập nhật ảnh!')
        });
    }

    function submitBasicInfo() {
        const model = {
            FullName: $('#fullName').val(),
            Email: $('#email').val(),
            Phone: $('#phone').val(),
            Address: $('#address').val()
        };
        $.ajax({
            url: '/Seller/Stores/UpdateBasicInfo',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(model),
            success: () => location.reload(),
            error: () => alert('Lỗi khi cập nhật thông tin!')
        });
    }

    function submitPaymentInfo() {
        const model = {
            Bank: $('#bank').val(),
            BankAccount: $('#bankAccount').val(),
            FullName: $('#accountName').val()
        };
        $.ajax({
            url: '/Seller/Stores/UpdatePaymentInfo',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(model),
            success: () => location.reload(),
            error: () => alert('Lỗi khi cập nhật thanh toán!')
        });

    }

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Tìm tất cả alert có class .alert
        var alerts = document.querySelectorAll('.alert');
        alerts.forEach(function (alert) {
            setTimeout(function () {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close(); // auto close sau 2s
            }, 2000);
        });
    });
</script>